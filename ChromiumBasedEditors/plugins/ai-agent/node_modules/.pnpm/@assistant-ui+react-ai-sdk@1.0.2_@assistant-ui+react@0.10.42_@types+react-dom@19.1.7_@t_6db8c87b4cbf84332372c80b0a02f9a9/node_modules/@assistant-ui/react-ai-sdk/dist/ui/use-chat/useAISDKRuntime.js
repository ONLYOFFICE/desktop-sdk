"use client";

// src/ui/use-chat/useAISDKRuntime.tsx
import {
  useExternalStoreRuntime
} from "@assistant-ui/react";
import { sliceMessagesUntil } from "../utils/sliceMessagesUntil.js";
import { toCreateMessage } from "../utils/toCreateMessage.js";
import { vercelAttachmentAdapter } from "../utils/vercelAttachmentAdapter.js";
import { getVercelAIMessages } from "../getVercelAIMessages.js";
import { AISDKMessageConverter } from "../utils/convertMessage.js";
import {
  aiSDKV5FormatAdapter
} from "../adapters/aiSDKFormatAdapter.js";
import { useExternalHistory } from "./useExternalHistory.js";
import { useMemo } from "react";
var useAISDKRuntime = (chatHelpers, adapter = {}) => {
  const messages = AISDKMessageConverter.useThreadMessages({
    isRunning: chatHelpers.status === "submitted" || chatHelpers.status == "streaming",
    messages: chatHelpers.messages
  });
  const isLoading = useExternalHistory(
    useMemo(
      () => ({
        get current() {
          return runtime;
        }
      }),
      // eslint-disable-next-line react-hooks/exhaustive-deps
      []
    ),
    adapter.adapters?.history,
    AISDKMessageConverter.toThreadMessages,
    aiSDKV5FormatAdapter,
    (messages2) => {
      chatHelpers.setMessages(messages2);
    }
  );
  const runtime = useExternalStoreRuntime({
    isRunning: chatHelpers.status === "submitted" || chatHelpers.status === "streaming",
    messages,
    setMessages: (messages2) => chatHelpers.setMessages(
      messages2.map(getVercelAIMessages).flat()
    ),
    onCancel: async () => chatHelpers.stop(),
    onNew: async (message) => {
      const createMessage = await toCreateMessage(message);
      await chatHelpers.sendMessage(createMessage);
    },
    onEdit: async (message) => {
      const newMessages = sliceMessagesUntil(
        chatHelpers.messages,
        message.parentId
      );
      chatHelpers.setMessages(newMessages);
      const createMessage = await toCreateMessage(message);
      await chatHelpers.sendMessage(createMessage);
    },
    onReload: async (parentId) => {
      const newMessages = sliceMessagesUntil(chatHelpers.messages, parentId);
      chatHelpers.setMessages(newMessages);
      await chatHelpers.regenerate();
    },
    onAddToolResult: ({ toolCallId, result }) => {
      chatHelpers.addToolResult({
        tool: toolCallId,
        toolCallId,
        output: result
      });
    },
    adapters: {
      attachments: vercelAttachmentAdapter,
      ...adapter.adapters
    },
    isLoading
  });
  return runtime;
};
export {
  useAISDKRuntime
};
//# sourceMappingURL=useAISDKRuntime.js.map