// src/ui/use-chat/AssistantChatTransport.tsx
import {
  DefaultChatTransport
} from "ai";
import z from "zod";
var toAISDKTools = (tools) => {
  return Object.fromEntries(
    Object.entries(tools).map(([name, tool]) => [
      name,
      {
        ...tool.description ? { description: tool.description } : void 0,
        parameters: tool.parameters instanceof z.ZodType ? z.toJSONSchema(tool.parameters) : tool.parameters
      }
    ])
  );
};
var getEnabledTools = (tools) => {
  return Object.fromEntries(
    Object.entries(tools).filter(
      ([, tool]) => !tool.disabled && tool.type !== "backend"
    )
  );
};
var AssistantChatTransport = class extends DefaultChatTransport {
  runtime;
  constructor(initOptions) {
    super({
      ...initOptions,
      prepareSendMessagesRequest: async (options) => {
        const context = this.runtime?.thread.getModelContext();
        const optionsEx = {
          ...options,
          body: {
            system: context?.system,
            tools: toAISDKTools(getEnabledTools(context?.tools ?? {})),
            ...options?.body
          }
        };
        const preparedRequest = await initOptions?.prepareSendMessagesRequest?.(optionsEx);
        return {
          ...preparedRequest,
          body: preparedRequest?.body ?? {
            ...optionsEx.body,
            id: options.id,
            messages: options.messages,
            trigger: options.trigger,
            messageId: options.messageId
          }
        };
      }
    });
  }
  setRuntime(runtime) {
    this.runtime = runtime;
  }
};
export {
  AssistantChatTransport
};
//# sourceMappingURL=AssistantChatTransport.js.map