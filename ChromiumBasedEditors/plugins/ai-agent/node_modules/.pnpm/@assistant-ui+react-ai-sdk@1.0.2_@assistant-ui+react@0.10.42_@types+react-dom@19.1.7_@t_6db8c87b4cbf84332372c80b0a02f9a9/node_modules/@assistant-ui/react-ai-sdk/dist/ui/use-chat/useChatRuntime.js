"use client";

// src/ui/use-chat/useChatRuntime.tsx
import { useChat } from "@ai-sdk/react";
import {
  unstable_useCloudThreadListAdapter,
  unstable_useRemoteThreadListRuntime,
  useRuntimeAdapters
} from "@assistant-ui/react";
import { useAISDKRuntime } from "./useAISDKRuntime.js";
import { AssistantChatTransport } from "./AssistantChatTransport.js";
var useChatThreadRuntime = (options) => {
  const {
    adapters,
    transport: transportOptions,
    ...chatOptions
  } = options ?? {};
  const transport = transportOptions ?? new AssistantChatTransport();
  const contextAdapters = useRuntimeAdapters();
  const chat = useChat({
    ...chatOptions,
    transport,
    onToolCall: async ({ toolCall }) => {
      await chatOptions.onToolCall?.({ toolCall });
      const tools = runtime.thread.getModelContext().tools;
      const tool = tools?.[toolCall.toolName];
      if (tool) {
        try {
          const result = await tool.execute?.(toolCall.input, {
            toolCallId: toolCall.toolCallId,
            abortSignal: new AbortController().signal
            // dummy signal for now
          });
          chat.addToolResult({
            tool: toolCall.toolName,
            toolCallId: toolCall.toolCallId,
            output: result
          });
        } catch (error) {
          chat.addToolResult({
            tool: toolCall.toolName,
            toolCallId: toolCall.toolCallId,
            output: {
              error: error instanceof Error ? error.message : String(error)
            }
          });
        }
      }
    }
  });
  const runtime = useAISDKRuntime(chat, {
    adapters: {
      ...contextAdapters,
      ...adapters
    }
  });
  if (transport instanceof AssistantChatTransport) {
    transport.setRuntime(runtime);
  }
  return runtime;
};
var useChatRuntime = ({
  cloud,
  ...options
} = {}) => {
  const cloudAdapter = unstable_useCloudThreadListAdapter({ cloud });
  return unstable_useRemoteThreadListRuntime({
    runtimeHook: function RuntimeHook() {
      return useChatThreadRuntime(options);
    },
    adapter: cloudAdapter
  });
};
export {
  useChatRuntime,
  useChatThreadRuntime
};
//# sourceMappingURL=useChatRuntime.js.map