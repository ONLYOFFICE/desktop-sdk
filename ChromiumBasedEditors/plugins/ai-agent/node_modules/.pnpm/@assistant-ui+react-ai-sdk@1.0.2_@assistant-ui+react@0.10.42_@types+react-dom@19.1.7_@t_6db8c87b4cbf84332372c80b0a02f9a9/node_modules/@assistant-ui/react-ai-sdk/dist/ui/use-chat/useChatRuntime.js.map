{"version":3,"sources":["../../../src/ui/use-chat/useChatRuntime.tsx"],"sourcesContent":["\"use client\";\n\nimport { useChat, type UIMessage } from \"@ai-sdk/react\";\nimport type { AssistantCloud } from \"assistant-cloud\";\nimport {\n  AssistantRuntime,\n  unstable_useCloudThreadListAdapter,\n  unstable_useRemoteThreadListRuntime,\n  useRuntimeAdapters,\n} from \"@assistant-ui/react\";\nimport { useAISDKRuntime, type AISDKRuntimeAdapter } from \"./useAISDKRuntime\";\nimport { ChatInit } from \"ai\";\nimport { AssistantChatTransport } from \"./AssistantChatTransport\";\n\nexport type UseChatRuntimeOptions<UI_MESSAGE extends UIMessage = UIMessage> =\n  ChatInit<UI_MESSAGE> & {\n    cloud?: AssistantCloud | undefined;\n    adapters?: AISDKRuntimeAdapter[\"adapters\"] | undefined;\n  };\n\nexport const useChatThreadRuntime = <UI_MESSAGE extends UIMessage = UIMessage>(\n  options?: UseChatRuntimeOptions<UI_MESSAGE>,\n): AssistantRuntime => {\n  const {\n    adapters,\n    transport: transportOptions,\n    ...chatOptions\n  } = options ?? {};\n  const transport = transportOptions ?? new AssistantChatTransport();\n\n  // Get adapters from context (including history adapter from cloud)\n  const contextAdapters = useRuntimeAdapters();\n\n  const chat = useChat({\n    ...chatOptions,\n    transport,\n    onToolCall: async ({ toolCall }) => {\n      await chatOptions.onToolCall?.({ toolCall });\n\n      const tools = runtime.thread.getModelContext().tools;\n      const tool = tools?.[toolCall.toolName];\n      if (tool) {\n        try {\n          const result = await tool.execute?.(toolCall.input, {\n            toolCallId: toolCall.toolCallId,\n            abortSignal: new AbortController().signal, // dummy signal for now\n          });\n          chat.addToolResult({\n            tool: toolCall.toolName,\n            toolCallId: toolCall.toolCallId,\n            output: result,\n          });\n        } catch (error) {\n          chat.addToolResult({\n            tool: toolCall.toolName,\n            toolCallId: toolCall.toolCallId,\n            output: {\n              error: error instanceof Error ? error.message : String(error),\n            },\n          });\n        }\n      }\n    },\n  });\n\n  const runtime = useAISDKRuntime(chat as any, {\n    adapters: {\n      ...contextAdapters,\n      ...adapters,\n    },\n  });\n  if (transport instanceof AssistantChatTransport) {\n    transport.setRuntime(runtime);\n  }\n\n  return runtime;\n};\n\nexport const useChatRuntime = <UI_MESSAGE extends UIMessage = UIMessage>({\n  cloud,\n  ...options\n}: UseChatRuntimeOptions<UI_MESSAGE> = {}): AssistantRuntime => {\n  const cloudAdapter = unstable_useCloudThreadListAdapter({ cloud });\n  return unstable_useRemoteThreadListRuntime({\n    runtimeHook: function RuntimeHook() {\n      return useChatThreadRuntime(options);\n    },\n    adapter: cloudAdapter,\n  });\n};\n"],"mappings":";;;AAEA,SAAS,eAA+B;AAExC;AAAA,EAEE;AAAA,EACA;AAAA,EACA;AAAA,OACK;AACP,SAAS,uBAAiD;AAE1D,SAAS,8BAA8B;AAQhC,IAAM,uBAAuB,CAClC,YACqB;AACrB,QAAM;AAAA,IACJ;AAAA,IACA,WAAW;AAAA,IACX,GAAG;AAAA,EACL,IAAI,WAAW,CAAC;AAChB,QAAM,YAAY,oBAAoB,IAAI,uBAAuB;AAGjE,QAAM,kBAAkB,mBAAmB;AAE3C,QAAM,OAAO,QAAQ;AAAA,IACnB,GAAG;AAAA,IACH;AAAA,IACA,YAAY,OAAO,EAAE,SAAS,MAAM;AAClC,YAAM,YAAY,aAAa,EAAE,SAAS,CAAC;AAE3C,YAAM,QAAQ,QAAQ,OAAO,gBAAgB,EAAE;AAC/C,YAAM,OAAO,QAAQ,SAAS,QAAQ;AACtC,UAAI,MAAM;AACR,YAAI;AACF,gBAAM,SAAS,MAAM,KAAK,UAAU,SAAS,OAAO;AAAA,YAClD,YAAY,SAAS;AAAA,YACrB,aAAa,IAAI,gBAAgB,EAAE;AAAA;AAAA,UACrC,CAAC;AACD,eAAK,cAAc;AAAA,YACjB,MAAM,SAAS;AAAA,YACf,YAAY,SAAS;AAAA,YACrB,QAAQ;AAAA,UACV,CAAC;AAAA,QACH,SAAS,OAAO;AACd,eAAK,cAAc;AAAA,YACjB,MAAM,SAAS;AAAA,YACf,YAAY,SAAS;AAAA,YACrB,QAAQ;AAAA,cACN,OAAO,iBAAiB,QAAQ,MAAM,UAAU,OAAO,KAAK;AAAA,YAC9D;AAAA,UACF,CAAC;AAAA,QACH;AAAA,MACF;AAAA,IACF;AAAA,EACF,CAAC;AAED,QAAM,UAAU,gBAAgB,MAAa;AAAA,IAC3C,UAAU;AAAA,MACR,GAAG;AAAA,MACH,GAAG;AAAA,IACL;AAAA,EACF,CAAC;AACD,MAAI,qBAAqB,wBAAwB;AAC/C,cAAU,WAAW,OAAO;AAAA,EAC9B;AAEA,SAAO;AACT;AAEO,IAAM,iBAAiB,CAA2C;AAAA,EACvE;AAAA,EACA,GAAG;AACL,IAAuC,CAAC,MAAwB;AAC9D,QAAM,eAAe,mCAAmC,EAAE,MAAM,CAAC;AACjE,SAAO,oCAAoC;AAAA,IACzC,aAAa,SAAS,cAAc;AAClC,aAAO,qBAAqB,OAAO;AAAA,IACrC;AAAA,IACA,SAAS;AAAA,EACX,CAAC;AACH;","names":[]}