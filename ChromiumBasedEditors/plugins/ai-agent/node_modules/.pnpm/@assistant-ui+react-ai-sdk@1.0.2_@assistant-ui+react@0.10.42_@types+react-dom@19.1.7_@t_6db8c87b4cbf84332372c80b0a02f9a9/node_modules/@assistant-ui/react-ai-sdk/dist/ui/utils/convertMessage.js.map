{"version":3,"sources":["../../../src/ui/utils/convertMessage.ts"],"sourcesContent":["import { isToolUIPart, UIMessage } from \"ai\";\nimport {\n  unstable_createMessageConverter,\n  type ReasoningMessagePart,\n  type ToolCallMessagePart,\n  type TextMessagePart,\n  type SourceMessagePart,\n  type FileMessagePart,\n} from \"@assistant-ui/react\";\n\nconst convertParts = (message: UIMessage) => {\n  if (!message.parts || message.parts.length === 0) {\n    return [];\n  }\n\n  return message.parts\n    .filter((p) => p.type !== \"step-start\")\n    .map((part) => {\n      const type = part.type;\n\n      // Handle text parts\n      if (type === \"text\") {\n        return {\n          type: \"text\",\n          text: part.text,\n        } satisfies TextMessagePart;\n      }\n\n      // Handle reasoning parts\n      if (type === \"reasoning\") {\n        return {\n          type: \"reasoning\",\n          text: part.text,\n        } satisfies ReasoningMessagePart;\n      }\n\n      // Handle tool-* parts (AI SDK v5 tool calls)\n      if (isToolUIPart(part)) {\n        const toolName = type.replace(\"tool-\", \"\");\n        const toolCallId = part.toolCallId;\n\n        // Extract args and result based on state\n        let args: any = {};\n        let result: any = undefined;\n        let isError = false;\n\n        if (\n          part.state === \"input-streaming\" ||\n          part.state === \"input-available\"\n        ) {\n          args = part.input || {};\n        } else if (part.state === \"output-available\") {\n          args = part.input || {};\n          result = part.output;\n        } else if (part.state === \"output-error\") {\n          args = part.input || {};\n          isError = true;\n          result = { error: part.errorText };\n        }\n\n        return {\n          type: \"tool-call\",\n          toolName,\n          toolCallId,\n          argsText: JSON.stringify(args),\n          args,\n          result,\n          isError,\n        } satisfies ToolCallMessagePart;\n      }\n\n      // Handle dynamic-tool parts\n      if (type === \"dynamic-tool\") {\n        const toolName = part.toolName;\n        const toolCallId = part.toolCallId;\n\n        // Extract args and result based on state\n        let args: any = {};\n        let result: any = undefined;\n        let isError = false;\n\n        if (\n          part.state === \"input-streaming\" ||\n          part.state === \"input-available\"\n        ) {\n          args = part.input || {};\n        } else if (part.state === \"output-available\") {\n          args = part.input || {};\n          result = part.output;\n        } else if (part.state === \"output-error\") {\n          args = part.input || {};\n          isError = true;\n          result = { error: part.errorText };\n        }\n\n        return {\n          type: \"tool-call\",\n          toolName,\n          toolCallId,\n          argsText: JSON.stringify(args),\n          args,\n          result,\n          isError,\n        } satisfies ToolCallMessagePart;\n      }\n\n      // Handle source-url parts\n      if (type === \"source-url\") {\n        return {\n          type: \"source\",\n          sourceType: \"url\",\n          id: part.sourceId,\n          url: part.url,\n          title: part.title || \"\",\n        } satisfies SourceMessagePart;\n      }\n\n      // Handle source-document parts\n      if (type === \"source-document\") {\n        console.warn(\n          `Source document part type ${type} is not yet supported in conversion`,\n        );\n        return null;\n      }\n\n      // Handle file parts\n      if (type === \"file\") {\n        return {\n          type: \"file\",\n          data: part.url,\n          mimeType: part.mediaType,\n        } satisfies FileMessagePart;\n      }\n\n      // Handle data-* parts (AI SDK v5 data parts)\n      if (type.startsWith(\"data-\")) {\n        // For now, we'll skip data parts as they don't have a direct equivalent\n        // in the assistant-ui types. They could be converted to a custom message part\n        // or handled differently based on the specific use case.\n        console.warn(\n          `Data part type ${type} is not yet supported in conversion`,\n        );\n        return null;\n      }\n\n      // For unsupported types, we'll skip them instead of throwing\n      console.warn(`Unsupported message part type: ${type}`);\n      return null;\n    })\n    .filter(Boolean) as any[];\n};\n\nexport const AISDKMessageConverter = unstable_createMessageConverter(\n  (message: UIMessage) => {\n    // UIMessage doesn't have createdAt, so we'll use current date or undefined\n    const createdAt = new Date();\n    switch (message.role) {\n      case \"user\":\n        return {\n          role: \"user\",\n          id: message.id,\n          createdAt,\n          content: convertParts(message),\n          attachments: message.parts\n            ?.filter((p: any) => p.type === \"file\")\n            .map((part: any, idx) => ({\n              id: idx.toString(),\n              type: \"file\" as const,\n              name: part.name ?? part.url ?? \"file\",\n              content: [],\n              contentType: part.mediaType ?? part.mimeType ?? \"unknown/unknown\",\n              status: { type: \"complete\" as const },\n            })),\n        };\n\n      case \"system\":\n        return {\n          role: \"system\",\n          id: message.id,\n          createdAt,\n          content: convertParts(message),\n        };\n\n      case \"assistant\":\n        return {\n          role: \"assistant\",\n          id: message.id,\n          createdAt,\n          content: convertParts(message),\n          metadata: {\n            unstable_annotations: (message as any).annotations,\n            unstable_data: Array.isArray((message as any).data)\n              ? (message as any).data\n              : (message as any).data\n                ? [(message as any).data]\n                : undefined,\n            custom: {},\n          },\n        };\n\n      default:\n        console.warn(`Unsupported message role: ${message.role}`);\n        return [];\n    }\n  },\n);\n"],"mappings":"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","names":[]}