{"version":3,"sources":["../../../src/ui/use-chat/useExternalHistory.tsx"],"sourcesContent":["\"use client\";\n\nimport {\n  AssistantRuntime,\n  ThreadHistoryAdapter,\n  ThreadMessage,\n  MessageFormatAdapter,\n  getExternalStoreMessages,\n  MessageFormatRepository,\n  ExportedMessageRepository,\n  INTERNAL,\n} from \"@assistant-ui/react\";\nimport { useRef, useEffect, useState, RefObject } from \"react\";\n\nconst { MessageRepository } = INTERNAL;\n\nexport const toExportedMessageRepository = <TMessage,>(\n  toThreadMessages: (messages: TMessage[]) => ThreadMessage[],\n  messages: MessageFormatRepository<TMessage>,\n): ExportedMessageRepository => {\n  return {\n    headId: messages.headId!,\n    messages: messages.messages.map((m) => {\n      const message = toThreadMessages([m.message])[0]!;\n      return {\n        ...m,\n        message,\n      };\n    }),\n  };\n};\n\nexport const useExternalHistory = <TMessage,>(\n  runtimeRef: RefObject<AssistantRuntime>,\n  historyAdapter: ThreadHistoryAdapter | undefined,\n  toThreadMessages: (messages: TMessage[]) => ThreadMessage[],\n  storageFormatAdapter: MessageFormatAdapter<TMessage, any>,\n  onSetMessages: (messages: TMessage[]) => void,\n) => {\n  const loadedRef = useRef(false);\n  const [isLoading, setIsLoading] = useState(true);\n  const historyIds = useRef(new Set<string>());\n\n  const onSetMessagesRef = useRef<typeof onSetMessages>(() => onSetMessages);\n  useEffect(() => {\n    onSetMessagesRef.current = onSetMessages;\n  });\n\n  // Load messages from history adapter on mount\n  useEffect(() => {\n    if (!historyAdapter || loadedRef.current) return;\n\n    const loadHistory = async () => {\n      setIsLoading(true);\n      try {\n        const repo = await historyAdapter\n          .withFormat?.(storageFormatAdapter)\n          .load();\n        if (repo && repo.messages.length > 0) {\n          const converted = toExportedMessageRepository(toThreadMessages, repo);\n          runtimeRef.current.thread.import(converted);\n\n          const tempRepo = new MessageRepository();\n          tempRepo.import(converted);\n          const messages = tempRepo.getMessages();\n\n          onSetMessagesRef.current(\n            messages.map(getExternalStoreMessages<TMessage>).flat(),\n          );\n\n          historyIds.current = new Set(\n            converted.messages.map((m) => m.message.id),\n          );\n        }\n      } catch (error) {\n        console.error(\"Failed to load message history:\", error);\n      } finally {\n        setIsLoading(false);\n      }\n    };\n\n    if (!loadedRef.current) {\n      loadedRef.current = true;\n      loadHistory();\n    }\n  }, [historyAdapter, storageFormatAdapter, toThreadMessages]);\n\n  useEffect(() => {\n    return runtimeRef.current.thread.subscribe(async () => {\n      const { messages, isRunning } = runtimeRef.current.thread.getState();\n      if (isRunning) return;\n\n      for (let i = 0; i < messages.length; i++) {\n        const message = messages[i]!;\n        if (\n          message.status === undefined ||\n          message.status.type === \"complete\" ||\n          message.status.type === \"incomplete\"\n        ) {\n          if (historyIds.current.has(message.id)) return;\n          historyIds.current.add(message.id);\n\n          const parentId = i > 0 ? messages[i - 1]!.id : null;\n          await historyAdapter?.withFormat?.(storageFormatAdapter).append({\n            parentId,\n            message: getExternalStoreMessages<TMessage>(message)[0]!,\n          });\n        }\n      }\n    });\n  }, [historyAdapter, storageFormatAdapter]);\n\n  return isLoading;\n};\n"],"mappings":";;;AAEA;AAAA,EAKE;AAAA,EAGA;AAAA,OACK;AACP,SAAS,QAAQ,WAAW,gBAA2B;AAEvD,IAAM,EAAE,kBAAkB,IAAI;AAEvB,IAAM,8BAA8B,CACzC,kBACA,aAC8B;AAC9B,SAAO;AAAA,IACL,QAAQ,SAAS;AAAA,IACjB,UAAU,SAAS,SAAS,IAAI,CAAC,MAAM;AACrC,YAAM,UAAU,iBAAiB,CAAC,EAAE,OAAO,CAAC,EAAE,CAAC;AAC/C,aAAO;AAAA,QACL,GAAG;AAAA,QACH;AAAA,MACF;AAAA,IACF,CAAC;AAAA,EACH;AACF;AAEO,IAAM,qBAAqB,CAChC,YACA,gBACA,kBACA,sBACA,kBACG;AACH,QAAM,YAAY,OAAO,KAAK;AAC9B,QAAM,CAAC,WAAW,YAAY,IAAI,SAAS,IAAI;AAC/C,QAAM,aAAa,OAAO,oBAAI,IAAY,CAAC;AAE3C,QAAM,mBAAmB,OAA6B,MAAM,aAAa;AACzE,YAAU,MAAM;AACd,qBAAiB,UAAU;AAAA,EAC7B,CAAC;AAGD,YAAU,MAAM;AACd,QAAI,CAAC,kBAAkB,UAAU,QAAS;AAE1C,UAAM,cAAc,YAAY;AAC9B,mBAAa,IAAI;AACjB,UAAI;AACF,cAAM,OAAO,MAAM,eAChB,aAAa,oBAAoB,EACjC,KAAK;AACR,YAAI,QAAQ,KAAK,SAAS,SAAS,GAAG;AACpC,gBAAM,YAAY,4BAA4B,kBAAkB,IAAI;AACpE,qBAAW,QAAQ,OAAO,OAAO,SAAS;AAE1C,gBAAM,WAAW,IAAI,kBAAkB;AACvC,mBAAS,OAAO,SAAS;AACzB,gBAAM,WAAW,SAAS,YAAY;AAEtC,2BAAiB;AAAA,YACf,SAAS,IAAI,wBAAkC,EAAE,KAAK;AAAA,UACxD;AAEA,qBAAW,UAAU,IAAI;AAAA,YACvB,UAAU,SAAS,IAAI,CAAC,MAAM,EAAE,QAAQ,EAAE;AAAA,UAC5C;AAAA,QACF;AAAA,MACF,SAAS,OAAO;AACd,gBAAQ,MAAM,mCAAmC,KAAK;AAAA,MACxD,UAAE;AACA,qBAAa,KAAK;AAAA,MACpB;AAAA,IACF;AAEA,QAAI,CAAC,UAAU,SAAS;AACtB,gBAAU,UAAU;AACpB,kBAAY;AAAA,IACd;AAAA,EACF,GAAG,CAAC,gBAAgB,sBAAsB,gBAAgB,CAAC;AAE3D,YAAU,MAAM;AACd,WAAO,WAAW,QAAQ,OAAO,UAAU,YAAY;AACrD,YAAM,EAAE,UAAU,UAAU,IAAI,WAAW,QAAQ,OAAO,SAAS;AACnE,UAAI,UAAW;AAEf,eAAS,IAAI,GAAG,IAAI,SAAS,QAAQ,KAAK;AACxC,cAAM,UAAU,SAAS,CAAC;AAC1B,YACE,QAAQ,WAAW,UACnB,QAAQ,OAAO,SAAS,cACxB,QAAQ,OAAO,SAAS,cACxB;AACA,cAAI,WAAW,QAAQ,IAAI,QAAQ,EAAE,EAAG;AACxC,qBAAW,QAAQ,IAAI,QAAQ,EAAE;AAEjC,gBAAM,WAAW,IAAI,IAAI,SAAS,IAAI,CAAC,EAAG,KAAK;AAC/C,gBAAM,gBAAgB,aAAa,oBAAoB,EAAE,OAAO;AAAA,YAC9D;AAAA,YACA,SAAS,yBAAmC,OAAO,EAAE,CAAC;AAAA,UACxD,CAAC;AAAA,QACH;AAAA,MACF;AAAA,IACF,CAAC;AAAA,EACH,GAAG,CAAC,gBAAgB,oBAAoB,CAAC;AAEzC,SAAO;AACT;","names":[]}