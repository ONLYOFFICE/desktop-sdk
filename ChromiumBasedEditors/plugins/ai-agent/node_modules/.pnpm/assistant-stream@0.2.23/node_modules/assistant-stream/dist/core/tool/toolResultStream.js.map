{"version":3,"sources":["../../../src/core/tool/toolResultStream.ts"],"sourcesContent":["import { Tool, ToolCallReader, ToolExecuteFunction } from \"./tool-types\";\nimport { StandardSchemaV1 } from \"@standard-schema/spec\";\nimport { ToolResponse } from \"./ToolResponse\";\nimport { ToolExecutionStream } from \"./ToolExecutionStream\";\nimport { AssistantMessage } from \"../utils/types\";\nimport { ReadonlyJSONObject, ReadonlyJSONValue } from \"../../utils\";\n\nconst isStandardSchemaV1 = (\n  schema: unknown,\n): schema is StandardSchemaV1<unknown> => {\n  return (\n    typeof schema === \"object\" &&\n    schema !== null &&\n    \"~standard\" in schema &&\n    (schema as StandardSchemaV1<unknown>)[\"~standard\"].version === 1\n  );\n};\n\nfunction getToolResponse(\n  tools: Record<string, Tool> | undefined,\n  abortSignal: AbortSignal,\n  toolCall: {\n    toolCallId: string;\n    toolName: string;\n    args: ReadonlyJSONObject;\n  },\n) {\n  const tool = tools?.[toolCall.toolName];\n  if (!tool || !tool.execute) return undefined;\n\n  const getResult = async (\n    toolExecute: ToolExecuteFunction<ReadonlyJSONObject, unknown>,\n  ): Promise<ToolResponse<ReadonlyJSONValue>> => {\n    let executeFn = toolExecute;\n\n    if (isStandardSchemaV1(tool.parameters)) {\n      let result = tool.parameters[\"~standard\"].validate(toolCall.args);\n      if (result instanceof Promise) result = await result;\n\n      if (result.issues) {\n        executeFn =\n          tool.experimental_onSchemaValidationError ??\n          (() => {\n            throw new Error(\n              `Function parameter validation failed. ${JSON.stringify(result.issues)}`,\n            );\n          });\n      }\n    }\n\n    const result = (await executeFn(toolCall.args, {\n      toolCallId: toolCall.toolCallId,\n      abortSignal,\n    })) as unknown as ReadonlyJSONValue;\n    return ToolResponse.toResponse(result);\n  };\n\n  return getResult(tool.execute);\n}\n\nfunction getToolStreamResponse(\n  tools: Record<string, Tool> | undefined,\n  abortSignal: AbortSignal,\n  reader: ToolCallReader<any, ReadonlyJSONValue>,\n  context: {\n    toolCallId: string;\n    toolName: string;\n  },\n) {\n  tools?.[context.toolName]?.streamCall?.(reader, {\n    toolCallId: context.toolCallId,\n    abortSignal,\n  });\n}\n\nexport async function unstable_runPendingTools(\n  message: AssistantMessage,\n  tools: Record<string, Tool> | undefined,\n  abortSignal: AbortSignal,\n) {\n  // TODO parallel tool calling\n  for (const part of message.parts) {\n    if (part.type === \"tool-call\") {\n      const promiseOrUndefined = getToolResponse(tools, abortSignal, part);\n      if (promiseOrUndefined) {\n        const result = await promiseOrUndefined;\n        const updatedParts = message.parts.map((p) => {\n          if (p.type === \"tool-call\" && p.toolCallId === part.toolCallId) {\n            return {\n              ...p,\n              state: \"result\" as const,\n              ...(result.artifact !== undefined\n                ? { artifact: result.artifact }\n                : {}),\n              result: result.result as ReadonlyJSONValue,\n              isError: result.isError,\n            };\n          }\n          return p;\n        });\n        message = {\n          ...message,\n          parts: updatedParts,\n          content: updatedParts,\n        };\n      }\n    }\n  }\n  return message;\n}\n\nexport function toolResultStream(\n  tools: Record<string, Tool> | undefined,\n  abortSignal: AbortSignal,\n) {\n  return new ToolExecutionStream({\n    execute: (toolCall) => getToolResponse(tools, abortSignal, toolCall),\n    streamCall: ({ reader, ...context }) =>\n      getToolStreamResponse(tools, abortSignal, reader, context),\n  });\n}\n"],"mappings":";AAEA,SAAS,oBAAoB;AAC7B,SAAS,2BAA2B;AAIpC,IAAM,qBAAqB,CACzB,WACwC;AACxC,SACE,OAAO,WAAW,YAClB,WAAW,QACX,eAAe,UACd,OAAqC,WAAW,EAAE,YAAY;AAEnE;AAEA,SAAS,gBACP,OACA,aACA,UAKA;AACA,QAAM,OAAO,QAAQ,SAAS,QAAQ;AACtC,MAAI,CAAC,QAAQ,CAAC,KAAK,QAAS,QAAO;AAEnC,QAAM,YAAY,OAChB,gBAC6C;AAC7C,QAAI,YAAY;AAEhB,QAAI,mBAAmB,KAAK,UAAU,GAAG;AACvC,UAAIA,UAAS,KAAK,WAAW,WAAW,EAAE,SAAS,SAAS,IAAI;AAChE,UAAIA,mBAAkB,QAAS,CAAAA,UAAS,MAAMA;AAE9C,UAAIA,QAAO,QAAQ;AACjB,oBACE,KAAK,yCACJ,MAAM;AACL,gBAAM,IAAI;AAAA,YACR,yCAAyC,KAAK,UAAUA,QAAO,MAAM,CAAC;AAAA,UACxE;AAAA,QACF;AAAA,MACJ;AAAA,IACF;AAEA,UAAM,SAAU,MAAM,UAAU,SAAS,MAAM;AAAA,MAC7C,YAAY,SAAS;AAAA,MACrB;AAAA,IACF,CAAC;AACD,WAAO,aAAa,WAAW,MAAM;AAAA,EACvC;AAEA,SAAO,UAAU,KAAK,OAAO;AAC/B;AAEA,SAAS,sBACP,OACA,aACA,QACA,SAIA;AACA,UAAQ,QAAQ,QAAQ,GAAG,aAAa,QAAQ;AAAA,IAC9C,YAAY,QAAQ;AAAA,IACpB;AAAA,EACF,CAAC;AACH;AAEA,eAAsB,yBACpB,SACA,OACA,aACA;AAEA,aAAW,QAAQ,QAAQ,OAAO;AAChC,QAAI,KAAK,SAAS,aAAa;AAC7B,YAAM,qBAAqB,gBAAgB,OAAO,aAAa,IAAI;AACnE,UAAI,oBAAoB;AACtB,cAAM,SAAS,MAAM;AACrB,cAAM,eAAe,QAAQ,MAAM,IAAI,CAAC,MAAM;AAC5C,cAAI,EAAE,SAAS,eAAe,EAAE,eAAe,KAAK,YAAY;AAC9D,mBAAO;AAAA,cACL,GAAG;AAAA,cACH,OAAO;AAAA,cACP,GAAI,OAAO,aAAa,SACpB,EAAE,UAAU,OAAO,SAAS,IAC5B,CAAC;AAAA,cACL,QAAQ,OAAO;AAAA,cACf,SAAS,OAAO;AAAA,YAClB;AAAA,UACF;AACA,iBAAO;AAAA,QACT,CAAC;AACD,kBAAU;AAAA,UACR,GAAG;AAAA,UACH,OAAO;AAAA,UACP,SAAS;AAAA,QACX;AAAA,MACF;AAAA,IACF;AAAA,EACF;AACA,SAAO;AACT;AAEO,SAAS,iBACd,OACA,aACA;AACA,SAAO,IAAI,oBAAoB;AAAA,IAC7B,SAAS,CAAC,aAAa,gBAAgB,OAAO,aAAa,QAAQ;AAAA,IACnE,YAAY,CAAC,EAAE,QAAQ,GAAG,QAAQ,MAChC,sBAAsB,OAAO,aAAa,QAAQ,OAAO;AAAA,EAC7D,CAAC;AACH;","names":["result"]}