{"version":3,"sources":["../../../src/core/tool/ToolResponse.ts"],"sourcesContent":["import { ReadonlyJSONValue } from \"../../utils/json/json-value\";\n\nconst TOOL_RESPONSE_SYMBOL = Symbol.for(\"aui.tool-response\");\n\nexport type ToolResponseLike<TResult> = {\n  result: TResult;\n  artifact?: ReadonlyJSONValue | undefined;\n  isError?: boolean | undefined;\n};\n\nexport class ToolResponse<TResult> {\n  get [TOOL_RESPONSE_SYMBOL]() {\n    return true;\n  }\n\n  readonly artifact?: ReadonlyJSONValue;\n  readonly result: TResult;\n  readonly isError: boolean;\n\n  constructor(options: ToolResponseLike<TResult>) {\n    if (options.artifact !== undefined) {\n      this.artifact = options.artifact;\n    }\n    this.result = options.result;\n    this.isError = options.isError ?? false;\n  }\n\n  static [Symbol.hasInstance](\n    obj: unknown,\n  ): obj is ToolResponse<ReadonlyJSONValue> {\n    return (\n      typeof obj === \"object\" && obj !== null && TOOL_RESPONSE_SYMBOL in obj\n    );\n  }\n\n  static toResponse(result: any | ToolResponse<any>): ToolResponse<any> {\n    if (result instanceof ToolResponse) {\n      return result;\n    }\n    return new ToolResponse({\n      result: result === undefined ? \"<no result>\" : result,\n    });\n  }\n}\n"],"mappings":";AAEA,IAAM,uBAAuB,OAAO,IAAI,mBAAmB;AAQpD,IAAM,eAAN,MAAM,cAAsB;AAAA,EACjC,KAAK,oBAAoB,IAAI;AAC3B,WAAO;AAAA,EACT;AAAA,EAES;AAAA,EACA;AAAA,EACA;AAAA,EAET,YAAY,SAAoC;AAC9C,QAAI,QAAQ,aAAa,QAAW;AAClC,WAAK,WAAW,QAAQ;AAAA,IAC1B;AACA,SAAK,SAAS,QAAQ;AACtB,SAAK,UAAU,QAAQ,WAAW;AAAA,EACpC;AAAA,EAEA,QAAQ,OAAO,WAAW,EACxB,KACwC;AACxC,WACE,OAAO,QAAQ,YAAY,QAAQ,QAAQ,wBAAwB;AAAA,EAEvE;AAAA,EAEA,OAAO,WAAW,QAAoD;AACpE,QAAI,kBAAkB,eAAc;AAClC,aAAO;AAAA,IACT;AACA,WAAO,IAAI,cAAa;AAAA,MACtB,QAAQ,WAAW,SAAY,gBAAgB;AAAA,IACjD,CAAC;AAAA,EACH;AACF;","names":[]}