{"version":3,"sources":["../../../../src/core/utils/stream/AssistantTransformStream.ts"],"sourcesContent":["import { AssistantStreamChunk } from \"../../AssistantStreamChunk\";\nimport {\n  AssistantStreamController,\n  createAssistantStreamController,\n} from \"../../modules/assistant-stream\";\n\ntype AssistantTransformerFlushCallback = (\n  controller: AssistantStreamController,\n) => void | PromiseLike<void>;\n\ntype AssistantTransformerStartCallback = (\n  controller: AssistantStreamController,\n) => void | PromiseLike<void>;\n\ntype AssistantTransformerTransformCallback<I> = (\n  chunk: I,\n  controller: AssistantStreamController,\n) => void | PromiseLike<void>;\n\ntype AssistantTransformer<I> = {\n  flush?: AssistantTransformerFlushCallback;\n  start?: AssistantTransformerStartCallback;\n  transform?: AssistantTransformerTransformCallback<I>;\n};\n\nexport class AssistantTransformStream<I> extends TransformStream<\n  I,\n  AssistantStreamChunk\n> {\n  constructor(\n    transformer: AssistantTransformer<I>,\n    writableStrategy?: QueuingStrategy<I>,\n    readableStrategy?: QueuingStrategy<AssistantStreamChunk>,\n  ) {\n    const [stream, runController] = createAssistantStreamController();\n\n    let runPipeTask: Promise<void>;\n    super(\n      {\n        start(controller) {\n          runPipeTask = stream\n            .pipeTo(\n              new WritableStream({\n                write(chunk) {\n                  controller.enqueue(chunk);\n                },\n                abort(reason?: any) {\n                  controller.error(reason);\n                },\n                close() {\n                  controller.terminate();\n                },\n              }),\n            )\n            .catch((error) => {\n              controller.error(error);\n            });\n\n          return transformer.start?.(runController);\n        },\n        transform(chunk) {\n          return transformer.transform?.(chunk, runController);\n        },\n        async flush() {\n          await transformer.flush?.(runController);\n          runController.close();\n          await runPipeTask;\n        },\n      },\n      writableStrategy,\n      readableStrategy,\n    );\n  }\n}\n"],"mappings":";AACA;AAAA,EAEE;AAAA,OACK;AAqBA,IAAM,2BAAN,cAA0C,gBAG/C;AAAA,EACA,YACE,aACA,kBACA,kBACA;AACA,UAAM,CAAC,QAAQ,aAAa,IAAI,gCAAgC;AAEhE,QAAI;AACJ;AAAA,MACE;AAAA,QACE,MAAM,YAAY;AAChB,wBAAc,OACX;AAAA,YACC,IAAI,eAAe;AAAA,cACjB,MAAM,OAAO;AACX,2BAAW,QAAQ,KAAK;AAAA,cAC1B;AAAA,cACA,MAAM,QAAc;AAClB,2BAAW,MAAM,MAAM;AAAA,cACzB;AAAA,cACA,QAAQ;AACN,2BAAW,UAAU;AAAA,cACvB;AAAA,YACF,CAAC;AAAA,UACH,EACC,MAAM,CAAC,UAAU;AAChB,uBAAW,MAAM,KAAK;AAAA,UACxB,CAAC;AAEH,iBAAO,YAAY,QAAQ,aAAa;AAAA,QAC1C;AAAA,QACA,UAAU,OAAO;AACf,iBAAO,YAAY,YAAY,OAAO,aAAa;AAAA,QACrD;AAAA,QACA,MAAM,QAAQ;AACZ,gBAAM,YAAY,QAAQ,aAAa;AACvC,wBAAc,MAAM;AACpB,gBAAM;AAAA,QACR;AAAA,MACF;AAAA,MACA;AAAA,MACA;AAAA,IACF;AAAA,EACF;AACF;","names":[]}