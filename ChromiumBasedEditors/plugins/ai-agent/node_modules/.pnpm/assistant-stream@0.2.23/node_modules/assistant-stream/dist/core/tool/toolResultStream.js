// src/core/tool/toolResultStream.ts
import { ToolResponse } from "./ToolResponse.js";
import { ToolExecutionStream } from "./ToolExecutionStream.js";
var isStandardSchemaV1 = (schema) => {
  return typeof schema === "object" && schema !== null && "~standard" in schema && schema["~standard"].version === 1;
};
function getToolResponse(tools, abortSignal, toolCall) {
  const tool = tools?.[toolCall.toolName];
  if (!tool || !tool.execute) return void 0;
  const getResult = async (toolExecute) => {
    let executeFn = toolExecute;
    if (isStandardSchemaV1(tool.parameters)) {
      let result2 = tool.parameters["~standard"].validate(toolCall.args);
      if (result2 instanceof Promise) result2 = await result2;
      if (result2.issues) {
        executeFn = tool.experimental_onSchemaValidationError ?? (() => {
          throw new Error(
            `Function parameter validation failed. ${JSON.stringify(result2.issues)}`
          );
        });
      }
    }
    const result = await executeFn(toolCall.args, {
      toolCallId: toolCall.toolCallId,
      abortSignal
    });
    return ToolResponse.toResponse(result);
  };
  return getResult(tool.execute);
}
function getToolStreamResponse(tools, abortSignal, reader, context) {
  tools?.[context.toolName]?.streamCall?.(reader, {
    toolCallId: context.toolCallId,
    abortSignal
  });
}
async function unstable_runPendingTools(message, tools, abortSignal) {
  for (const part of message.parts) {
    if (part.type === "tool-call") {
      const promiseOrUndefined = getToolResponse(tools, abortSignal, part);
      if (promiseOrUndefined) {
        const result = await promiseOrUndefined;
        const updatedParts = message.parts.map((p) => {
          if (p.type === "tool-call" && p.toolCallId === part.toolCallId) {
            return {
              ...p,
              state: "result",
              ...result.artifact !== void 0 ? { artifact: result.artifact } : {},
              result: result.result,
              isError: result.isError
            };
          }
          return p;
        });
        message = {
          ...message,
          parts: updatedParts,
          content: updatedParts
        };
      }
    }
  }
  return message;
}
function toolResultStream(tools, abortSignal) {
  return new ToolExecutionStream({
    execute: (toolCall) => getToolResponse(tools, abortSignal, toolCall),
    streamCall: ({ reader, ...context }) => getToolStreamResponse(tools, abortSignal, reader, context)
  });
}
export {
  toolResultStream,
  unstable_runPendingTools
};
//# sourceMappingURL=toolResultStream.js.map