{"version":3,"sources":["../../src/primitives/MarkdownText.tsx"],"sourcesContent":["\"use client\";\n\nimport { INTERNAL, useMessagePartText } from \"@assistant-ui/react\";\nimport {\n  ComponentRef,\n  ElementType,\n  FC,\n  forwardRef,\n  ForwardRefExoticComponent,\n  RefAttributes,\n  useMemo,\n  type ComponentPropsWithoutRef,\n  type ComponentType,\n} from \"react\";\nimport ReactMarkdown, { type Options } from \"react-markdown\";\nimport { SyntaxHighlighterProps, CodeHeaderProps } from \"../overrides/types\";\nimport { PreOverride } from \"../overrides/PreOverride\";\nimport {\n  DefaultPre,\n  DefaultCode,\n  DefaultCodeBlockContent,\n  DefaultCodeHeader,\n} from \"../overrides/defaultComponents\";\nimport { useCallbackRef } from \"@radix-ui/react-use-callback-ref\";\nimport { CodeOverride } from \"../overrides/CodeOverride\";\nimport { Primitive } from \"@radix-ui/react-primitive\";\nimport classNames from \"classnames\";\n\nconst { useSmooth, useSmoothStatus, withSmoothContextProvider } = INTERNAL;\n\ntype MarkdownTextPrimitiveElement = ComponentRef<typeof Primitive.div>;\ntype PrimitiveDivProps = ComponentPropsWithoutRef<typeof Primitive.div>;\n\nexport type MarkdownTextPrimitiveProps = Omit<\n  Options,\n  \"components\" | \"children\"\n> & {\n  className?: string | undefined;\n  containerProps?: Omit<PrimitiveDivProps, \"children\" | \"asChild\"> | undefined;\n  containerComponent?: ElementType | undefined;\n  components?:\n    | (NonNullable<Options[\"components\"]> & {\n        SyntaxHighlighter?: ComponentType<SyntaxHighlighterProps> | undefined;\n        CodeHeader?: ComponentType<CodeHeaderProps> | undefined;\n      })\n    | undefined;\n  /**\n   * Language-specific component overrides.\n   * @example { mermaid: { SyntaxHighlighter: MermaidDiagram } }\n   */\n  componentsByLanguage?:\n    | Record<\n        string,\n        {\n          CodeHeader?: ComponentType<CodeHeaderProps> | undefined;\n          SyntaxHighlighter?: ComponentType<SyntaxHighlighterProps> | undefined;\n        }\n      >\n    | undefined;\n  smooth?: boolean | undefined;\n  /**\n   * Function to transform text before markdown processing.\n   */\n  preprocess?: (text: string) => string;\n};\n\nconst MarkdownTextInner: FC<MarkdownTextPrimitiveProps> = ({\n  components: userComponents,\n  componentsByLanguage,\n  smooth = true,\n  preprocess,\n  ...rest\n}) => {\n  const messagePartText = useMessagePartText();\n\n  const processedMessagePart = useMemo(() => {\n    if (!preprocess) return messagePartText;\n\n    return {\n      ...messagePartText,\n      text: preprocess(messagePartText.text),\n    };\n  }, [messagePartText, preprocess]);\n\n  const { text } = useSmooth(processedMessagePart, smooth);\n\n  const {\n    pre = DefaultPre,\n    code = DefaultCode,\n    SyntaxHighlighter = DefaultCodeBlockContent,\n    CodeHeader = DefaultCodeHeader,\n  } = userComponents ?? {};\n  const useCodeOverrideComponents = useMemo(() => {\n    return {\n      Pre: pre,\n      Code: code,\n      SyntaxHighlighter,\n      CodeHeader,\n    };\n  }, [pre, code, SyntaxHighlighter, CodeHeader]);\n  const CodeComponent = useCallbackRef((props) => (\n    <CodeOverride\n      components={useCodeOverrideComponents}\n      componentsByLanguage={componentsByLanguage}\n      {...props}\n    />\n  ));\n\n  const components: Options[\"components\"] = useMemo(() => {\n    const { pre, code, SyntaxHighlighter, CodeHeader, ...componentsRest } =\n      userComponents ?? {};\n    return {\n      ...componentsRest,\n      pre: PreOverride,\n      code: CodeComponent,\n    };\n  }, [CodeComponent, userComponents]);\n\n  return (\n    <ReactMarkdown components={components} {...rest}>\n      {text}\n    </ReactMarkdown>\n  );\n};\n\nconst MarkdownTextPrimitiveImpl: ForwardRefExoticComponent<MarkdownTextPrimitiveProps> &\n  RefAttributes<MarkdownTextPrimitiveElement> = forwardRef<\n  MarkdownTextPrimitiveElement,\n  MarkdownTextPrimitiveProps\n>(\n  (\n    {\n      className,\n      containerProps,\n      containerComponent: Container = \"div\",\n      ...rest\n    },\n    forwardedRef,\n  ) => {\n    const status = useSmoothStatus();\n    return (\n      <Container\n        data-status={status.type}\n        {...containerProps}\n        className={classNames(className, containerProps?.className)}\n        ref={forwardedRef}\n      >\n        <MarkdownTextInner {...rest}></MarkdownTextInner>\n      </Container>\n    );\n  },\n);\n\nMarkdownTextPrimitiveImpl.displayName = \"MarkdownTextPrimitive\";\n\nexport const MarkdownTextPrimitive = withSmoothContextProvider(\n  MarkdownTextPrimitiveImpl,\n);\n"],"mappings":";;;AAEA,SAAS,UAAU,0BAA0B;AAC7C;AAAA,EAIE;AAAA,EAGA;AAAA,OAGK;AACP,OAAO,mBAAqC;AAE5C,SAAS,mBAAmB;AAC5B;AAAA,EACE;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,OACK;AACP,SAAS,sBAAsB;AAC/B,SAAS,oBAAoB;AAE7B,OAAO,gBAAgB;AA2EnB;AAzEJ,IAAM,EAAE,WAAW,iBAAiB,0BAA0B,IAAI;AAsClE,IAAM,oBAAoD,CAAC;AAAA,EACzD,YAAY;AAAA,EACZ;AAAA,EACA,SAAS;AAAA,EACT;AAAA,EACA,GAAG;AACL,MAAM;AACJ,QAAM,kBAAkB,mBAAmB;AAE3C,QAAM,uBAAuB,QAAQ,MAAM;AACzC,QAAI,CAAC,WAAY,QAAO;AAExB,WAAO;AAAA,MACL,GAAG;AAAA,MACH,MAAM,WAAW,gBAAgB,IAAI;AAAA,IACvC;AAAA,EACF,GAAG,CAAC,iBAAiB,UAAU,CAAC;AAEhC,QAAM,EAAE,KAAK,IAAI,UAAU,sBAAsB,MAAM;AAEvD,QAAM;AAAA,IACJ,MAAM;AAAA,IACN,OAAO;AAAA,IACP,oBAAoB;AAAA,IACpB,aAAa;AAAA,EACf,IAAI,kBAAkB,CAAC;AACvB,QAAM,4BAA4B,QAAQ,MAAM;AAC9C,WAAO;AAAA,MACL,KAAK;AAAA,MACL,MAAM;AAAA,MACN;AAAA,MACA;AAAA,IACF;AAAA,EACF,GAAG,CAAC,KAAK,MAAM,mBAAmB,UAAU,CAAC;AAC7C,QAAM,gBAAgB,eAAe,CAAC,UACpC;AAAA,IAAC;AAAA;AAAA,MACC,YAAY;AAAA,MACZ;AAAA,MACC,GAAG;AAAA;AAAA,EACN,CACD;AAED,QAAM,aAAoC,QAAQ,MAAM;AACtD,UAAM,EAAE,KAAAA,MAAK,MAAAC,OAAM,mBAAAC,oBAAmB,YAAAC,aAAY,GAAG,eAAe,IAClE,kBAAkB,CAAC;AACrB,WAAO;AAAA,MACL,GAAG;AAAA,MACH,KAAK;AAAA,MACL,MAAM;AAAA,IACR;AAAA,EACF,GAAG,CAAC,eAAe,cAAc,CAAC;AAElC,SACE,oBAAC,iBAAc,YAAyB,GAAG,MACxC,gBACH;AAEJ;AAEA,IAAM,4BAC0C;AAAA,EAI9C,CACE;AAAA,IACE;AAAA,IACA;AAAA,IACA,oBAAoB,YAAY;AAAA,IAChC,GAAG;AAAA,EACL,GACA,iBACG;AACH,UAAM,SAAS,gBAAgB;AAC/B,WACE;AAAA,MAAC;AAAA;AAAA,QACC,eAAa,OAAO;AAAA,QACnB,GAAG;AAAA,QACJ,WAAW,WAAW,WAAW,gBAAgB,SAAS;AAAA,QAC1D,KAAK;AAAA,QAEL,8BAAC,qBAAmB,GAAG,MAAM;AAAA;AAAA,IAC/B;AAAA,EAEJ;AACF;AAEA,0BAA0B,cAAc;AAEjC,IAAM,wBAAwB;AAAA,EACnC;AACF;","names":["pre","code","SyntaxHighlighter","CodeHeader"]}