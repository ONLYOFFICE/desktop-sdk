{"version":3,"sources":["../src/memoization.tsx"],"sourcesContent":["import { Element } from \"hast\";\nimport { ComponentProps, ComponentType, ElementType, memo } from \"react\";\nimport { CodeHeaderProps, SyntaxHighlighterProps } from \"./overrides/types\";\n\ntype Components = {\n  [Key in Extract<ElementType, string>]?: ComponentType<ComponentProps<Key>>;\n} & {\n  SyntaxHighlighter?:\n    | ComponentType<Omit<SyntaxHighlighterProps, \"node\">>\n    | undefined;\n  CodeHeader?: ComponentType<Omit<CodeHeaderProps, \"node\">> | undefined;\n};\n\nconst areChildrenEqual = (prev: string | unknown, next: string | unknown) => {\n  if (typeof prev === \"string\") return prev === next;\n  return JSON.stringify(prev) === JSON.stringify(next);\n};\n\nexport const areNodesEqual = (\n  prev: Element | undefined,\n  next: Element | undefined,\n) => {\n  if (!prev || !next) return false;\n\n  const excludeMetadata = (props: Element[\"properties\"]) => {\n    const { position, data, ...rest } =\n      (props as Record<string, unknown>) || {};\n    return rest;\n  };\n\n  return (\n    JSON.stringify(excludeMetadata(prev.properties)) ===\n      JSON.stringify(excludeMetadata(next.properties)) &&\n    areChildrenEqual(prev.children, next.children)\n  );\n};\n\nexport const memoCompareNodes = (\n  prev: { node?: Element | undefined },\n  next: { node?: Element | undefined },\n) => {\n  return areNodesEqual(prev.node, next.node);\n};\n\nexport const memoizeMarkdownComponents = (components: Components = {}) => {\n  return Object.fromEntries(\n    Object.entries(components ?? {}).map(([key, value]) => {\n      if (!value) return [key, value];\n\n      const Component = value as ComponentType;\n      const WithoutNode = ({ node, ...props }: { node?: Element }) => {\n        return <Component {...props} />;\n      };\n      return [key, memo(WithoutNode, memoCompareNodes)];\n    }),\n  );\n};\n"],"mappings":";AACA,SAAqD,YAAY;AAkDlD;AAtCf,IAAM,mBAAmB,CAAC,MAAwB,SAA2B;AAC3E,MAAI,OAAO,SAAS,SAAU,QAAO,SAAS;AAC9C,SAAO,KAAK,UAAU,IAAI,MAAM,KAAK,UAAU,IAAI;AACrD;AAEO,IAAM,gBAAgB,CAC3B,MACA,SACG;AACH,MAAI,CAAC,QAAQ,CAAC,KAAM,QAAO;AAE3B,QAAM,kBAAkB,CAAC,UAAiC;AACxD,UAAM,EAAE,UAAU,MAAM,GAAG,KAAK,IAC7B,SAAqC,CAAC;AACzC,WAAO;AAAA,EACT;AAEA,SACE,KAAK,UAAU,gBAAgB,KAAK,UAAU,CAAC,MAC7C,KAAK,UAAU,gBAAgB,KAAK,UAAU,CAAC,KACjD,iBAAiB,KAAK,UAAU,KAAK,QAAQ;AAEjD;AAEO,IAAM,mBAAmB,CAC9B,MACA,SACG;AACH,SAAO,cAAc,KAAK,MAAM,KAAK,IAAI;AAC3C;AAEO,IAAM,4BAA4B,CAAC,aAAyB,CAAC,MAAM;AACxE,SAAO,OAAO;AAAA,IACZ,OAAO,QAAQ,cAAc,CAAC,CAAC,EAAE,IAAI,CAAC,CAAC,KAAK,KAAK,MAAM;AACrD,UAAI,CAAC,MAAO,QAAO,CAAC,KAAK,KAAK;AAE9B,YAAM,YAAY;AAClB,YAAM,cAAc,CAAC,EAAE,MAAM,GAAG,MAAM,MAA0B;AAC9D,eAAO,oBAAC,aAAW,GAAG,OAAO;AAAA,MAC/B;AACA,aAAO,CAAC,KAAK,KAAK,aAAa,gBAAgB,CAAC;AAAA,IAClD,CAAC;AAAA,EACH;AACF;","names":[]}