{"version":3,"sources":["../../src/overrides/CodeOverride.tsx"],"sourcesContent":["import {\n  ComponentPropsWithoutRef,\n  ComponentType,\n  FC,\n  memo,\n  useContext,\n} from \"react\";\nimport { PreContext, useIsMarkdownCodeBlock } from \"./PreOverride\";\nimport {\n  CodeComponent,\n  CodeHeaderProps,\n  PreComponent,\n  SyntaxHighlighterProps,\n} from \"./types\";\nimport { DefaultCodeBlock } from \"./CodeBlock\";\nimport { useCallbackRef } from \"@radix-ui/react-use-callback-ref\";\nimport { withDefaultProps } from \"./withDefaults\";\nimport { DefaultCodeBlockContent } from \"./defaultComponents\";\nimport { memoCompareNodes } from \"../memoization\";\n\nconst CodeBlockOverride: FC<CodeOverrideProps> = ({\n  node,\n  components: {\n    Pre,\n    Code,\n    SyntaxHighlighter: FallbackSyntaxHighlighter,\n    CodeHeader: FallbackCodeHeader,\n  },\n  componentsByLanguage = {},\n  children,\n  ...codeProps\n}) => {\n  const preProps = useContext(PreContext)!;\n  const getPreProps = withDefaultProps<any>(preProps);\n  const WrappedPre: PreComponent = useCallbackRef((props) => (\n    <Pre {...getPreProps(props)} />\n  ));\n\n  const getCodeProps = withDefaultProps<any>(codeProps);\n  const WrappedCode: CodeComponent = useCallbackRef((props) => (\n    <Code {...getCodeProps(props)} />\n  ));\n\n  const language = /language-(\\w+)/.exec(codeProps.className || \"\")?.[1] ?? \"\";\n\n  // if the code content is not string (due to rehype plugins), return a default code block\n  if (typeof children !== \"string\") {\n    return (\n      <DefaultCodeBlockContent\n        node={node}\n        components={{ Pre: WrappedPre, Code: WrappedCode }}\n        code={children}\n      />\n    );\n  }\n\n  const SyntaxHighlighter: ComponentType<SyntaxHighlighterProps> =\n    componentsByLanguage[language]?.SyntaxHighlighter ??\n    FallbackSyntaxHighlighter;\n\n  const CodeHeader: ComponentType<CodeHeaderProps> =\n    componentsByLanguage[language]?.CodeHeader ?? FallbackCodeHeader;\n\n  return (\n    <DefaultCodeBlock\n      node={node}\n      components={{\n        Pre: WrappedPre,\n        Code: WrappedCode,\n        SyntaxHighlighter,\n        CodeHeader,\n      }}\n      language={language || \"unknown\"}\n      code={children}\n    />\n  );\n};\n\nexport type CodeOverrideProps = ComponentPropsWithoutRef<CodeComponent> & {\n  components: {\n    Pre: PreComponent;\n    Code: CodeComponent;\n    CodeHeader: ComponentType<CodeHeaderProps>;\n    SyntaxHighlighter: ComponentType<SyntaxHighlighterProps>;\n  };\n  componentsByLanguage?:\n    | Record<\n        string,\n        {\n          CodeHeader?: ComponentType<CodeHeaderProps>;\n          SyntaxHighlighter?: ComponentType<SyntaxHighlighterProps>;\n        }\n      >\n    | undefined;\n};\n\nconst CodeOverrideImpl: FC<CodeOverrideProps> = ({\n  node,\n  components,\n  componentsByLanguage,\n  ...props\n}) => {\n  const isCodeBlock = useIsMarkdownCodeBlock();\n  if (!isCodeBlock) return <components.Code {...props} />;\n  return (\n    <CodeBlockOverride\n      node={node}\n      components={components}\n      componentsByLanguage={componentsByLanguage}\n      {...props}\n    />\n  );\n};\n\nexport const CodeOverride = memo(CodeOverrideImpl, (prev, next) => {\n  const isEqual =\n    prev.components === next.components &&\n    prev.componentsByLanguage === next.componentsByLanguage &&\n    memoCompareNodes(prev, next);\n  return isEqual;\n});\n"],"mappings":";AAAA;AAAA,EAIE;AAAA,EACA;AAAA,OACK;AACP,SAAS,YAAY,8BAA8B;AAOnD,SAAS,wBAAwB;AACjC,SAAS,sBAAsB;AAC/B,SAAS,wBAAwB;AACjC,SAAS,+BAA+B;AACxC,SAAS,wBAAwB;AAiB7B;AAfJ,IAAM,oBAA2C,CAAC;AAAA,EAChD;AAAA,EACA,YAAY;AAAA,IACV;AAAA,IACA;AAAA,IACA,mBAAmB;AAAA,IACnB,YAAY;AAAA,EACd;AAAA,EACA,uBAAuB,CAAC;AAAA,EACxB;AAAA,EACA,GAAG;AACL,MAAM;AACJ,QAAM,WAAW,WAAW,UAAU;AACtC,QAAM,cAAc,iBAAsB,QAAQ;AAClD,QAAM,aAA2B,eAAe,CAAC,UAC/C,oBAAC,OAAK,GAAG,YAAY,KAAK,GAAG,CAC9B;AAED,QAAM,eAAe,iBAAsB,SAAS;AACpD,QAAM,cAA6B,eAAe,CAAC,UACjD,oBAAC,QAAM,GAAG,aAAa,KAAK,GAAG,CAChC;AAED,QAAM,WAAW,iBAAiB,KAAK,UAAU,aAAa,EAAE,IAAI,CAAC,KAAK;AAG1E,MAAI,OAAO,aAAa,UAAU;AAChC,WACE;AAAA,MAAC;AAAA;AAAA,QACC;AAAA,QACA,YAAY,EAAE,KAAK,YAAY,MAAM,YAAY;AAAA,QACjD,MAAM;AAAA;AAAA,IACR;AAAA,EAEJ;AAEA,QAAM,oBACJ,qBAAqB,QAAQ,GAAG,qBAChC;AAEF,QAAM,aACJ,qBAAqB,QAAQ,GAAG,cAAc;AAEhD,SACE;AAAA,IAAC;AAAA;AAAA,MACC;AAAA,MACA,YAAY;AAAA,QACV,KAAK;AAAA,QACL,MAAM;AAAA,QACN;AAAA,QACA;AAAA,MACF;AAAA,MACA,UAAU,YAAY;AAAA,MACtB,MAAM;AAAA;AAAA,EACR;AAEJ;AAoBA,IAAM,mBAA0C,CAAC;AAAA,EAC/C;AAAA,EACA;AAAA,EACA;AAAA,EACA,GAAG;AACL,MAAM;AACJ,QAAM,cAAc,uBAAuB;AAC3C,MAAI,CAAC,YAAa,QAAO,oBAAC,WAAW,MAAX,EAAiB,GAAG,OAAO;AACrD,SACE;AAAA,IAAC;AAAA;AAAA,MACC;AAAA,MACA;AAAA,MACA;AAAA,MACC,GAAG;AAAA;AAAA,EACN;AAEJ;AAEO,IAAM,eAAe,KAAK,kBAAkB,CAAC,MAAM,SAAS;AACjE,QAAM,UACJ,KAAK,eAAe,KAAK,cACzB,KAAK,yBAAyB,KAAK,wBACnC,iBAAiB,MAAM,IAAI;AAC7B,SAAO;AACT,CAAC;","names":[]}