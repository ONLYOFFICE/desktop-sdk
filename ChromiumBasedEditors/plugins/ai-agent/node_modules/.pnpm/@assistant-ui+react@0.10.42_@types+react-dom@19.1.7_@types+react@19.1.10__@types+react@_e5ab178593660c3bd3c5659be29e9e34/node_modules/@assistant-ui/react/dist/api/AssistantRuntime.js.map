{"version":3,"sources":["../../src/api/AssistantRuntime.ts"],"sourcesContent":["import { AssistantRuntimeCore } from \"../runtimes/core/AssistantRuntimeCore\";\nimport { ModelContextProvider } from \"../model-context/ModelContextTypes\";\nimport { ThreadRuntime } from \"./ThreadRuntime\";\nimport { Unsubscribe } from \"../types\";\nimport { ThreadListRuntime, ThreadListRuntimeImpl } from \"./ThreadListRuntime\";\nimport { ExportedMessageRepository, ThreadMessageLike } from \"../runtimes\";\n\nexport type AssistantRuntime = {\n  /**\n   * The threads in this assistant.\n   */\n  readonly threads: ThreadListRuntime;\n\n  /**\n   * The currently selected main thread. Equivalent to `threads.main`.\n   */\n  readonly thread: ThreadRuntime;\n\n  /**\n   * @deprecated This field was renamed to `threads`.\n   */\n  readonly threadList: ThreadListRuntime;\n\n  /**\n   * Switch to a new thread.\n   *\n   * @deprecated This method was moved to `threads.switchToNewThread`.\n   */\n  switchToNewThread(): void;\n\n  /**\n   * Switch to a thread.\n   *\n   * @param threadId The thread ID to switch to.\n   * @deprecated This method was moved to `threads.switchToThread`.\n   */\n  switchToThread(threadId: string): void;\n\n  /**\n   * Register a model context provider. Model context providers are configuration such as system message, temperature, etc. that are set in the frontend.\n   *\n   * @param provider The model context provider to register.\n   */\n  registerModelContextProvider(provider: ModelContextProvider): Unsubscribe;\n\n  /**\n   * @deprecated This method was renamed to `registerModelContextProvider`.\n   */\n  registerModelConfigProvider(provider: ModelContextProvider): Unsubscribe;\n\n  /**\n   * @deprecated Use `runtime.thread.reset(initialMessages)`.\n   */\n  reset: unknown; // make it a type error\n};\n\nexport class AssistantRuntimeImpl implements AssistantRuntime {\n  public readonly threads;\n  public get threadList() {\n    return this.threads;\n  }\n\n  public readonly _thread: ThreadRuntime;\n\n  public constructor(private readonly _core: AssistantRuntimeCore) {\n    this.threads = new ThreadListRuntimeImpl(_core.threads);\n    this._thread = this.threads.main;\n  }\n\n  protected __internal_bindMethods() {\n    this.switchToNewThread = this.switchToNewThread.bind(this);\n    this.switchToThread = this.switchToThread.bind(this);\n    this.registerModelContextProvider =\n      this.registerModelContextProvider.bind(this);\n    this.registerModelConfigProvider =\n      this.registerModelConfigProvider.bind(this);\n    this.reset = this.reset.bind(this);\n  }\n\n  public get thread() {\n    return this._thread;\n  }\n\n  public switchToNewThread() {\n    return this._core.threads.switchToNewThread();\n  }\n\n  public switchToThread(threadId: string) {\n    return this._core.threads.switchToThread(threadId);\n  }\n\n  public registerModelContextProvider(provider: ModelContextProvider) {\n    return this._core.registerModelContextProvider(provider);\n  }\n\n  public registerModelConfigProvider(provider: ModelContextProvider) {\n    return this.registerModelContextProvider(provider);\n  }\n\n  public reset({\n    initialMessages,\n  }: { initialMessages?: ThreadMessageLike[] } = {}) {\n    return this._core.threads\n      .getMainThreadRuntimeCore()\n      .import(ExportedMessageRepository.fromArray(initialMessages ?? []));\n  }\n}\n"],"mappings":";AAIA,SAA4B,6BAA6B;AACzD,SAAS,iCAAoD;AAmDtD,IAAM,uBAAN,MAAuD;AAAA,EAQrD,YAA6B,OAA6B;AAA7B;AAClC,SAAK,UAAU,IAAI,sBAAsB,MAAM,OAAO;AACtD,SAAK,UAAU,KAAK,QAAQ;AAAA,EAC9B;AAAA,EAVgB;AAAA,EAChB,IAAW,aAAa;AACtB,WAAO,KAAK;AAAA,EACd;AAAA,EAEgB;AAAA,EAON,yBAAyB;AACjC,SAAK,oBAAoB,KAAK,kBAAkB,KAAK,IAAI;AACzD,SAAK,iBAAiB,KAAK,eAAe,KAAK,IAAI;AACnD,SAAK,+BACH,KAAK,6BAA6B,KAAK,IAAI;AAC7C,SAAK,8BACH,KAAK,4BAA4B,KAAK,IAAI;AAC5C,SAAK,QAAQ,KAAK,MAAM,KAAK,IAAI;AAAA,EACnC;AAAA,EAEA,IAAW,SAAS;AAClB,WAAO,KAAK;AAAA,EACd;AAAA,EAEO,oBAAoB;AACzB,WAAO,KAAK,MAAM,QAAQ,kBAAkB;AAAA,EAC9C;AAAA,EAEO,eAAe,UAAkB;AACtC,WAAO,KAAK,MAAM,QAAQ,eAAe,QAAQ;AAAA,EACnD;AAAA,EAEO,6BAA6B,UAAgC;AAClE,WAAO,KAAK,MAAM,6BAA6B,QAAQ;AAAA,EACzD;AAAA,EAEO,4BAA4B,UAAgC;AACjE,WAAO,KAAK,6BAA6B,QAAQ;AAAA,EACnD;AAAA,EAEO,MAAM;AAAA,IACX;AAAA,EACF,IAA+C,CAAC,GAAG;AACjD,WAAO,KAAK,MAAM,QACf,yBAAyB,EACzB,OAAO,0BAA0B,UAAU,mBAAmB,CAAC,CAAC,CAAC;AAAA,EACtE;AACF;","names":[]}