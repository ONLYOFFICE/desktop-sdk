{"version":3,"sources":["../../../src/context/react/ComposerContext.ts"],"sourcesContent":["\"use client\";\n\nimport { useMessageRuntime } from \"./MessageContext\";\nimport { useThreadRuntime } from \"./ThreadContext\";\nimport { ComposerRuntime } from \"../../api/ComposerRuntime\";\nimport { createStateHookForRuntime } from \"./utils/createStateHookForRuntime\";\n\n/**\n * Hook to access the ComposerRuntime from the current context.\n *\n * The ComposerRuntime provides access to composer state and actions for message\n * composition, including text input, attachments, and sending functionality.\n * This hook automatically resolves to either the message's edit composer or\n * the thread's main composer depending on the context.\n *\n * @param options Configuration options\n * @param options.optional Whether the hook should return null if no context is found\n * @returns The ComposerRuntime instance, or null if optional is true and no context exists\n *\n * @example\n * ```tsx\n * function ComposerActions() {\n *   const runtime = useComposerRuntime();\n *\n *   const handleSend = () => {\n *     if (runtime.getState().canSend) {\n *       runtime.send();\n *     }\n *   };\n *\n *   const handleCancel = () => {\n *     if (runtime.getState().canCancel) {\n *       runtime.cancel();\n *     }\n *   };\n *\n *   return (\n *     <div>\n *       <button onClick={handleSend}>Send</button>\n *       <button onClick={handleCancel}>Cancel</button>\n *     </div>\n *   );\n * }\n * ```\n */\nexport function useComposerRuntime(options?: {\n  optional?: false | undefined;\n}): ComposerRuntime;\nexport function useComposerRuntime(options?: {\n  optional?: boolean | undefined;\n}): ComposerRuntime | null;\nexport function useComposerRuntime(options?: {\n  optional?: boolean | undefined;\n}): ComposerRuntime | null {\n  const messageRuntime = useMessageRuntime({ optional: true });\n  const threadRuntime = useThreadRuntime(options);\n  return messageRuntime\n    ? messageRuntime.composer\n    : (threadRuntime?.composer ?? null);\n}\n\n/**\n * Hook to access the current composer state.\n *\n * This hook provides reactive access to the composer's state, including text content,\n * attachments, editing status, and send/cancel capabilities.\n *\n * @param selector Optional selector function to pick specific state properties\n * @returns The selected composer state or the entire composer state if no selector provided\n *\n * @example\n * ```tsx\n * function ComposerStatus() {\n *   const text = useComposer((state) => state.text);\n *   const canSend = useComposer((state) => state.canSend);\n *   const attachmentCount = useComposer((state) => state.attachments.length);\n *\n *   return (\n *     <div>\n *       Text: {text.length} chars,\n *       Attachments: {attachmentCount},\n *       Can send: {canSend}\n *     </div>\n *   );\n * }\n * ```\n */\nexport const useComposer = createStateHookForRuntime(useComposerRuntime);\n"],"mappings":";;;AAEA,SAAS,yBAAyB;AAClC,SAAS,wBAAwB;AAEjC,SAAS,iCAAiC;AA8CnC,SAAS,mBAAmB,SAER;AACzB,QAAM,iBAAiB,kBAAkB,EAAE,UAAU,KAAK,CAAC;AAC3D,QAAM,gBAAgB,iBAAiB,OAAO;AAC9C,SAAO,iBACH,eAAe,WACd,eAAe,YAAY;AAClC;AA4BO,IAAM,cAAc,0BAA0B,kBAAkB;","names":[]}