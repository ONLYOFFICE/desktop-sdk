{"version":3,"sources":["../../src/api/ThreadRuntime.ts"],"sourcesContent":["import {\n  ThreadSuggestion,\n  RuntimeCapabilities,\n  ThreadRuntimeCore,\n  SpeechState,\n  ThreadRuntimeEventType,\n  StartRunConfig,\n  ResumeRunConfig,\n} from \"../runtimes/core/ThreadRuntimeCore\";\nimport { ExportedMessageRepository } from \"../runtimes/utils/MessageRepository\";\nimport { AppendMessage, ThreadMessage, Unsubscribe } from \"../types\";\nimport { ThreadMessageLike } from \"../runtimes/external-store\";\nimport {\n  MessageRuntime,\n  MessageRuntimeImpl,\n  MessageState,\n} from \"./MessageRuntime\";\nimport { NestedSubscriptionSubject } from \"./subscribable/NestedSubscriptionSubject\";\nimport { ShallowMemoizeSubject } from \"./subscribable/ShallowMemoizeSubject\";\nimport { SubscribableWithState } from \"./subscribable/Subscribable\";\nimport {\n  ThreadComposerRuntime,\n  ThreadComposerRuntimeImpl,\n} from \"./ComposerRuntime\";\nimport { SKIP_UPDATE } from \"./subscribable/SKIP_UPDATE\";\nimport {\n  MessageRuntimePath,\n  ThreadListItemRuntimePath,\n  ThreadRuntimePath,\n} from \"./RuntimePathTypes\";\nimport type { ThreadListItemState } from \"./RuntimeBindings\";\nimport { RunConfig } from \"../types/AssistantTypes\";\nimport { EventSubscriptionSubject } from \"./subscribable/EventSubscriptionSubject\";\nimport { symbolInnerMessage } from \"../runtimes/external-store/getExternalStoreMessage\";\nimport { ModelContext } from \"../model-context\";\nimport { ChatModelRunOptions, ChatModelRunResult } from \"../runtimes\";\nimport { ReadonlyJSONValue } from \"assistant-stream/utils\";\n\nexport type CreateStartRunConfig = {\n  parentId: string | null;\n  sourceId?: string | null | undefined;\n  runConfig?: RunConfig | undefined;\n};\n\nexport type CreateResumeRunConfig = CreateStartRunConfig & {\n  stream: (\n    options: ChatModelRunOptions,\n  ) => AsyncGenerator<ChatModelRunResult, void, unknown>;\n};\n\nconst toResumeRunConfig = (message: CreateResumeRunConfig): ResumeRunConfig => {\n  return {\n    parentId: message.parentId ?? null,\n    sourceId: message.sourceId ?? null,\n    runConfig: message.runConfig ?? {},\n    stream: message.stream,\n  };\n};\n\nconst toStartRunConfig = (message: CreateStartRunConfig): StartRunConfig => {\n  return {\n    parentId: message.parentId ?? null,\n    sourceId: message.sourceId ?? null,\n    runConfig: message.runConfig ?? {},\n  };\n};\n\nexport type CreateAppendMessage =\n  | string\n  | {\n      parentId?: string | null | undefined;\n      sourceId?: string | null | undefined;\n      role?: AppendMessage[\"role\"] | undefined;\n      content: AppendMessage[\"content\"];\n      attachments?: AppendMessage[\"attachments\"] | undefined;\n      metadata?: AppendMessage[\"metadata\"] | undefined;\n      createdAt?: Date | undefined;\n      runConfig?: AppendMessage[\"runConfig\"] | undefined;\n      startRun?: boolean | undefined;\n    };\n\nconst toAppendMessage = (\n  messages: readonly ThreadMessage[],\n  message: CreateAppendMessage,\n): AppendMessage => {\n  if (typeof message === \"string\") {\n    return {\n      createdAt: new Date(),\n      parentId: messages.at(-1)?.id ?? null,\n      sourceId: null,\n      runConfig: {},\n      role: \"user\",\n      content: [{ type: \"text\", text: message }],\n      attachments: [],\n      metadata: { custom: {} },\n    };\n  }\n\n  return {\n    createdAt: message.createdAt ?? new Date(),\n    parentId: message.parentId ?? messages.at(-1)?.id ?? null,\n    sourceId: message.sourceId ?? null,\n    role: message.role ?? \"user\",\n    content: message.content,\n    attachments: message.attachments ?? [],\n    metadata: message.metadata ?? { custom: {} },\n    runConfig: message.runConfig ?? {},\n    startRun: message.startRun,\n  } as AppendMessage;\n};\n\nexport type ThreadRuntimeCoreBinding = SubscribableWithState<\n  ThreadRuntimeCore,\n  ThreadRuntimePath\n> & {\n  outerSubscribe(callback: () => void): Unsubscribe;\n};\n\nexport type ThreadListItemRuntimeBinding = SubscribableWithState<\n  ThreadListItemState,\n  ThreadListItemRuntimePath\n>;\n\nexport type ThreadState = {\n  /**\n   * The thread ID.\n   * @deprecated This field is deprecated and will be removed in 0.8.0. Use `useThreadListItem().id` instead.\n   */\n  readonly threadId: string;\n\n  /**\n   * The thread metadata.\n   *\n   * @deprecated Use `useThreadListItem()` instead. This field is deprecated and will be removed in 0.8.0.\n   */\n  readonly metadata: ThreadListItemState;\n\n  /**\n   * Whether the thread is disabled. Disabled threads cannot receive new messages.\n   */\n  readonly isDisabled: boolean;\n\n  /**\n   * Whether the thread is loading its history.\n   */\n  readonly isLoading: boolean;\n\n  /**\n   * Whether the thread is running. A thread is considered running when there is an active stream connection to the backend.\n   */\n  readonly isRunning: boolean;\n\n  /**\n   * The capabilities of the thread, such as whether the thread supports editing, branch switching, etc.\n   */\n  readonly capabilities: RuntimeCapabilities;\n\n  /**\n   * The messages in the currently selected branch of the thread.\n   */\n  readonly messages: readonly ThreadMessage[];\n\n  /**\n   * The thread state.\n   *\n   * @deprecated This feature is experimental\n   */\n  readonly state: ReadonlyJSONValue;\n\n  /**\n   * Follow up message suggestions to show the user.\n   */\n  readonly suggestions: readonly ThreadSuggestion[];\n\n  /**\n   * Custom extra information provided by the runtime.\n   */\n  readonly extras: unknown;\n\n  /**\n   * @deprecated This API is still under active development and might change without notice.\n   */\n  readonly speech: SpeechState | undefined;\n};\n\nexport const getThreadState = (\n  runtime: ThreadRuntimeCore,\n  threadListItemState: ThreadListItemState,\n): ThreadState => {\n  const lastMessage = runtime.messages.at(-1);\n  return Object.freeze({\n    threadId: threadListItemState.id,\n    metadata: threadListItemState,\n    capabilities: runtime.capabilities,\n    isDisabled: runtime.isDisabled,\n    isLoading: runtime.isLoading,\n    isRunning:\n      lastMessage?.role !== \"assistant\"\n        ? false\n        : lastMessage.status.type === \"running\",\n    messages: runtime.messages,\n    state: runtime.state,\n    suggestions: runtime.suggestions,\n    extras: runtime.extras,\n    speech: runtime.speech,\n  });\n};\n\nexport type ThreadRuntime = {\n  /**\n   * The selector for the thread runtime.\n   */\n  readonly path: ThreadRuntimePath;\n\n  /**\n   * The thread composer runtime.\n   */\n  readonly composer: ThreadComposerRuntime;\n\n  /**\n   * Gets a snapshot of the thread state.\n   */\n  getState(): ThreadState;\n\n  /**\n   * Append a new message to the thread.\n   *\n   * @example ```ts\n   * // append a new user message with the text \"Hello, world!\"\n   * threadRuntime.append(\"Hello, world!\");\n   * ```\n   *\n   * @example ```ts\n   * // append a new assistant message with the text \"Hello, world!\"\n   * threadRuntime.append({\n   *   role: \"assistant\",\n   *   content: [{ type: \"text\", text: \"Hello, world!\" }],\n   * });\n   * ```\n   */\n  append(message: CreateAppendMessage): void;\n\n  /**\n   * @deprecated pass an object with `parentId` instead. This will be removed in 0.8.0.\n   */\n  startRun(parentId: string | null): void;\n  /**\n   * Start a new run with the given configuration.\n   * @param config The configuration for starting the run\n   */\n  startRun(config: CreateStartRunConfig): void;\n\n  /**\n   * Resume a run with the given configuration.\n   * @param config The configuration for resuming the run\n   **/\n  unstable_resumeRun(config: CreateResumeRunConfig): void;\n\n  subscribe(callback: () => void): Unsubscribe;\n  cancelRun(): void;\n  getModelContext(): ModelContext;\n\n  /**\n   * @deprecated This method was renamed to `getModelContext`.\n   */\n  getModelConfig(): ModelContext;\n\n  export(): ExportedMessageRepository;\n  import(repository: ExportedMessageRepository): void;\n\n  /**\n   * Reset the thread with optional initial messages.\n   *\n   * @param initialMessages - Optional array of initial messages to populate the thread\n   */\n  reset(initialMessages?: readonly ThreadMessageLike[]): void;\n\n  getMesssageByIndex(idx: number): MessageRuntime;\n  getMesssageById(messageId: string): MessageRuntime;\n\n  /**\n   * @deprecated This API is still under active development and might change without notice.\n   */\n  stopSpeaking: () => void;\n\n  unstable_on(event: ThreadRuntimeEventType, callback: () => void): Unsubscribe;\n};\n\nexport class ThreadRuntimeImpl implements ThreadRuntime {\n  public get path() {\n    return this._threadBinding.path;\n  }\n\n  public get __internal_threadBinding() {\n    return this._threadBinding;\n  }\n\n  private readonly _threadBinding: ThreadRuntimeCoreBinding & {\n    getStateState(): ThreadState;\n  };\n\n  constructor(\n    threadBinding: ThreadRuntimeCoreBinding,\n    threadListItemBinding: ThreadListItemRuntimeBinding,\n  ) {\n    const stateBinding = new ShallowMemoizeSubject({\n      path: threadBinding.path,\n      getState: () =>\n        getThreadState(\n          threadBinding.getState(),\n          threadListItemBinding.getState(),\n        ),\n      subscribe: (callback) => {\n        const sub1 = threadBinding.subscribe(callback);\n        const sub2 = threadListItemBinding.subscribe(callback);\n        return () => {\n          sub1();\n          sub2();\n        };\n      },\n    });\n\n    this._threadBinding = {\n      path: threadBinding.path,\n      getState: () => threadBinding.getState(),\n      getStateState: () => stateBinding.getState(),\n      outerSubscribe: (callback) => threadBinding.outerSubscribe(callback),\n      subscribe: (callback) => threadBinding.subscribe(callback),\n    };\n\n    this.composer = new ThreadComposerRuntimeImpl(\n      new NestedSubscriptionSubject({\n        path: {\n          ...this.path,\n          ref: this.path.ref + `${this.path.ref}.composer`,\n          composerSource: \"thread\",\n        },\n        getState: () => this._threadBinding.getState().composer,\n        subscribe: (callback) => this._threadBinding.subscribe(callback),\n      }),\n    );\n  }\n\n  protected __internal_bindMethods() {\n    this.append = this.append.bind(this);\n    this.unstable_resumeRun = this.unstable_resumeRun.bind(this);\n    this.startRun = this.startRun.bind(this);\n    this.cancelRun = this.cancelRun.bind(this);\n    this.stopSpeaking = this.stopSpeaking.bind(this);\n    this.export = this.export.bind(this);\n    this.import = this.import.bind(this);\n    this.reset = this.reset.bind(this);\n    this.getMesssageByIndex = this.getMesssageByIndex.bind(this);\n    this.getMesssageById = this.getMesssageById.bind(this);\n    this.subscribe = this.subscribe.bind(this);\n    this.unstable_on = this.unstable_on.bind(this);\n    this.getModelContext = this.getModelContext.bind(this);\n    this.getModelConfig = this.getModelConfig.bind(this);\n    this.getState = this.getState.bind(this);\n  }\n\n  public readonly composer;\n\n  public getState() {\n    return this._threadBinding.getStateState();\n  }\n\n  public append(message: CreateAppendMessage) {\n    this._threadBinding\n      .getState()\n      .append(\n        toAppendMessage(this._threadBinding.getState().messages, message),\n      );\n  }\n\n  public subscribe(callback: () => void) {\n    return this._threadBinding.subscribe(callback);\n  }\n\n  public getModelContext() {\n    return this._threadBinding.getState().getModelContext();\n  }\n\n  public getModelConfig() {\n    return this.getModelContext();\n  }\n\n  public startRun(configOrParentId: string | null | CreateStartRunConfig) {\n    const config =\n      configOrParentId === null || typeof configOrParentId === \"string\"\n        ? { parentId: configOrParentId }\n        : configOrParentId;\n    return this._threadBinding.getState().startRun(toStartRunConfig(config));\n  }\n\n  public unstable_resumeRun(config: CreateResumeRunConfig) {\n    return this._threadBinding.getState().resumeRun(toResumeRunConfig(config));\n  }\n\n  public cancelRun() {\n    this._threadBinding.getState().cancelRun();\n  }\n\n  public stopSpeaking() {\n    return this._threadBinding.getState().stopSpeaking();\n  }\n\n  public export() {\n    return this._threadBinding.getState().export();\n  }\n\n  public import(data: ExportedMessageRepository) {\n    this._threadBinding.getState().import(data);\n  }\n\n  public reset(initialMessages?: readonly ThreadMessageLike[]) {\n    this._threadBinding.getState().reset(initialMessages);\n  }\n\n  public getMesssageByIndex(idx: number) {\n    if (idx < 0) throw new Error(\"Message index must be >= 0\");\n\n    return this._getMessageRuntime(\n      {\n        ...this.path,\n        ref: this.path.ref + `${this.path.ref}.messages[${idx}]`,\n        messageSelector: { type: \"index\", index: idx },\n      },\n      () => {\n        const messages = this._threadBinding.getState().messages;\n        const message = messages[idx];\n        if (!message) return undefined;\n        return {\n          message,\n          parentId: messages[idx - 1]?.id ?? null,\n        };\n      },\n    );\n  }\n\n  public getMesssageById(messageId: string) {\n    return this._getMessageRuntime(\n      {\n        ...this.path,\n        ref:\n          this.path.ref +\n          `${this.path.ref}.messages[messageId=${JSON.stringify(messageId)}]`,\n        messageSelector: { type: \"messageId\", messageId: messageId },\n      },\n      () => this._threadBinding.getState().getMessageById(messageId),\n    );\n  }\n\n  private _getMessageRuntime(\n    path: MessageRuntimePath,\n    callback: () =>\n      | { parentId: string | null; message: ThreadMessage }\n      | undefined,\n  ) {\n    return new MessageRuntimeImpl(\n      new ShallowMemoizeSubject({\n        path,\n        getState: () => {\n          const { message, parentId } = callback() ?? {};\n\n          const { messages, speech: speechState } =\n            this._threadBinding.getState();\n\n          if (!message || parentId === undefined) return SKIP_UPDATE;\n\n          const thread = this._threadBinding.getState();\n\n          const branches = thread.getBranches(message.id);\n          const submittedFeedback = thread.getSubmittedFeedback(message.id);\n\n          return {\n            ...message,\n            ...{ [symbolInnerMessage]: (message as any)[symbolInnerMessage] },\n\n            isLast: messages.at(-1)?.id === message.id,\n            parentId,\n\n            branchNumber: branches.indexOf(message.id) + 1,\n            branchCount: branches.length,\n\n            speech:\n              speechState?.messageId === message.id ? speechState : undefined,\n\n            submittedFeedback,\n          } satisfies MessageState;\n        },\n        subscribe: (callback) => this._threadBinding.subscribe(callback),\n      }),\n      this._threadBinding,\n    );\n  }\n\n  private _eventSubscriptionSubjects = new Map<\n    string,\n    EventSubscriptionSubject<ThreadRuntimeEventType>\n  >();\n\n  public unstable_on(\n    event: ThreadRuntimeEventType,\n    callback: () => void,\n  ): Unsubscribe {\n    let subject = this._eventSubscriptionSubjects.get(event);\n    if (!subject) {\n      subject = new EventSubscriptionSubject({\n        event: event,\n        binding: this._threadBinding,\n      });\n      this._eventSubscriptionSubjects.set(event, subject);\n    }\n    return subject.subscribe(callback);\n  }\n}\n"],"mappings":"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","names":["callback"]}