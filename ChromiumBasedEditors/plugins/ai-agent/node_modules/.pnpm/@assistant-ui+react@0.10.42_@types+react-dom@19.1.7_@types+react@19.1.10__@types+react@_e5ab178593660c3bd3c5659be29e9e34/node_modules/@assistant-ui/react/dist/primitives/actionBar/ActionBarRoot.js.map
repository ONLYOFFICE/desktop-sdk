{"version":3,"sources":["../../../src/primitives/actionBar/ActionBarRoot.tsx"],"sourcesContent":["\"use client\";\n\nimport { Primitive } from \"@radix-ui/react-primitive\";\nimport { type ComponentRef, forwardRef, ComponentPropsWithoutRef } from \"react\";\nimport {\n  useActionBarFloatStatus,\n  HideAndFloatStatus,\n} from \"./useActionBarFloatStatus\";\n\ntype PrimitiveDivProps = ComponentPropsWithoutRef<typeof Primitive.div>;\n\nexport namespace ActionBarPrimitiveRoot {\n  export type Element = ComponentRef<typeof Primitive.div>;\n  export type Props = PrimitiveDivProps & {\n    /**\n     * Whether to hide the action bar when the thread is running.\n     * @default false\n     */\n    hideWhenRunning?: boolean | undefined;\n    /**\n     * Controls when the action bar should automatically hide.\n     * - \"always\": Always hide unless hovered\n     * - \"not-last\": Hide unless this is the last message\n     * - \"never\": Never auto-hide\n     * @default \"never\"\n     */\n    autohide?: \"always\" | \"not-last\" | \"never\" | undefined;\n    /**\n     * Controls floating behavior when auto-hidden.\n     * - \"always\": Always float when hidden\n     * - \"single-branch\": Float only for single-branch messages\n     * - \"never\": Never float\n     * @default \"never\"\n     */\n    autohideFloat?: \"always\" | \"single-branch\" | \"never\" | undefined;\n  };\n}\n\n/**\n * The root container for action bar components.\n *\n * This component provides intelligent visibility and floating behavior for action bars,\n * automatically hiding and showing based on message state, hover status, and configuration.\n * It supports floating mode for better UX when space is limited.\n *\n * @example\n * ```tsx\n * <ActionBarPrimitive.Root\n *   hideWhenRunning={true}\n *   autohide=\"not-last\"\n *   autohideFloat=\"single-branch\"\n * >\n *   <ActionBarPrimitive.Copy />\n *   <ActionBarPrimitive.Edit />\n *   <ActionBarPrimitive.Reload />\n * </ActionBarPrimitive.Root>\n * ```\n */\nexport const ActionBarPrimitiveRoot = forwardRef<\n  ActionBarPrimitiveRoot.Element,\n  ActionBarPrimitiveRoot.Props\n>(({ hideWhenRunning, autohide, autohideFloat, ...rest }, ref) => {\n  const hideAndfloatStatus = useActionBarFloatStatus({\n    hideWhenRunning,\n    autohide,\n    autohideFloat,\n  });\n\n  if (hideAndfloatStatus === HideAndFloatStatus.Hidden) return null;\n\n  return (\n    <Primitive.div\n      {...(hideAndfloatStatus === HideAndFloatStatus.Floating\n        ? { \"data-floating\": \"true\" }\n        : null)}\n      {...rest}\n      ref={ref}\n    />\n  );\n});\n\nActionBarPrimitiveRoot.displayName = \"ActionBarPrimitive.Root\";\n"],"mappings":";;;AAEA,SAAS,iBAAiB;AAC1B,SAA4B,kBAA4C;AACxE;AAAA,EACE;AAAA,EACA;AAAA,OACK;AAgEH;AAbG,IAAM,yBAAyB,WAGpC,CAAC,EAAE,iBAAiB,UAAU,eAAe,GAAG,KAAK,GAAG,QAAQ;AAChE,QAAM,qBAAqB,wBAAwB;AAAA,IACjD;AAAA,IACA;AAAA,IACA;AAAA,EACF,CAAC;AAED,MAAI,uBAAuB,mBAAmB,OAAQ,QAAO;AAE7D,SACE;AAAA,IAAC,UAAU;AAAA,IAAV;AAAA,MACE,GAAI,uBAAuB,mBAAmB,WAC3C,EAAE,iBAAiB,OAAO,IAC1B;AAAA,MACH,GAAG;AAAA,MACJ;AAAA;AAAA,EACF;AAEJ,CAAC;AAED,uBAAuB,cAAc;","names":[]}