{"version":3,"sources":["../../../../src/context/react/utils/createContextStoreHook.ts"],"sourcesContent":["import { UseBoundStore } from \"zustand\";\nimport { ReadonlyStore } from \"../../ReadonlyStore\";\n\n/**\n * Creates hooks for accessing a store within a context.\n * @param contextHook - The hook to access the context.\n * @param contextKey - The key of the store in the context.\n * @returns An object containing the hooks: `use...` and `use...Store`.\n */\nexport function createContextStoreHook<T, K extends keyof T & string>(\n  contextHook: (options?: { optional?: boolean }) => T | null,\n  contextKey: K,\n) {\n  type StoreType = T[K];\n  type StateType = StoreType extends ReadonlyStore<infer S> ? S : never;\n\n  // Define useStoreStoreHook with overloads\n  function useStoreStoreHook(): ReadonlyStore<StateType>;\n  function useStoreStoreHook(options: {\n    optional: true;\n  }): ReadonlyStore<StateType> | null;\n  function useStoreStoreHook(options?: {\n    optional?: boolean;\n  }): ReadonlyStore<StateType> | null {\n    const context = contextHook(options);\n    if (!context) return null;\n    return context[contextKey] as ReadonlyStore<StateType>;\n  }\n\n  // Define useStoreHook with overloads\n  function useStoreHook(): StateType;\n  function useStoreHook<TSelected>(\n    selector: (state: StateType) => TSelected,\n  ): TSelected;\n  function useStoreHook(options: { optional: true }): StateType | null;\n  function useStoreHook<TSelected>(options: {\n    optional: true;\n    selector?: (state: StateType) => TSelected;\n  }): TSelected | null;\n  function useStoreHook<TSelected>(\n    param?:\n      | ((state: StateType) => TSelected)\n      | {\n          optional?: boolean;\n          selector?: (state: StateType) => TSelected;\n        },\n  ): TSelected | StateType | null {\n    let optional = false;\n    let selector: ((state: StateType) => TSelected) | undefined;\n\n    if (typeof param === \"function\") {\n      selector = param;\n    } else if (param && typeof param === \"object\") {\n      optional = !!param.optional;\n      selector = param.selector;\n    }\n\n    const store = useStoreStoreHook({\n      optional,\n    } as any) as UseBoundStore<ReadonlyStore<StateType>>;\n    if (!store) return null;\n    return selector ? store(selector) : store();\n  }\n\n  // Return an object with keys based on contextKey\n  return {\n    [contextKey]: useStoreHook,\n    [`${contextKey}Store`]: useStoreStoreHook,\n  } as {\n    [P in K]: typeof useStoreHook;\n  } & {\n    [P in `${K}Store`]: typeof useStoreStoreHook;\n  };\n}\n"],"mappings":";AASO,SAAS,uBACd,aACA,YACA;AASA,WAAS,kBAAkB,SAES;AAClC,UAAM,UAAU,YAAY,OAAO;AACnC,QAAI,CAAC,QAAS,QAAO;AACrB,WAAO,QAAQ,UAAU;AAAA,EAC3B;AAYA,WAAS,aACP,OAM8B;AAC9B,QAAI,WAAW;AACf,QAAI;AAEJ,QAAI,OAAO,UAAU,YAAY;AAC/B,iBAAW;AAAA,IACb,WAAW,SAAS,OAAO,UAAU,UAAU;AAC7C,iBAAW,CAAC,CAAC,MAAM;AACnB,iBAAW,MAAM;AAAA,IACnB;AAEA,UAAM,QAAQ,kBAAkB;AAAA,MAC9B;AAAA,IACF,CAAQ;AACR,QAAI,CAAC,MAAO,QAAO;AACnB,WAAO,WAAW,MAAM,QAAQ,IAAI,MAAM;AAAA,EAC5C;AAGA,SAAO;AAAA,IACL,CAAC,UAAU,GAAG;AAAA,IACd,CAAC,GAAG,UAAU,OAAO,GAAG;AAAA,EAC1B;AAKF;","names":[]}