{"version":3,"sources":["../../src/cloud/AssistantCloudThreadHistoryAdapter.tsx"],"sourcesContent":["import { RefObject, useState } from \"react\";\nimport { useThreadListItemRuntime } from \"../context\";\nimport { ThreadHistoryAdapter } from \"../runtimes/adapters/thread-history/ThreadHistoryAdapter\";\nimport { ExportedMessageRepositoryItem } from \"../runtimes/utils/MessageRepository\";\nimport { AssistantCloud } from \"assistant-cloud\";\nimport { auiV0Decode, auiV0Encode } from \"./auiV0\";\nimport { ThreadListItemRuntime } from \"../api\";\nimport {\n  MessageFormatAdapter,\n  MessageFormatItem,\n  MessageFormatRepository,\n  MessageStorageEntry,\n} from \"../runtimes/adapters/thread-history/MessageFormatAdapter\";\nimport { GenericThreadHistoryAdapter } from \"../runtimes/adapters/thread-history/ThreadHistoryAdapter\";\nimport { ReadonlyJSONObject } from \"assistant-stream/utils\";\n\nclass FormattedThreadHistoryAdapter<TMessage, TStorageFormat>\n  implements GenericThreadHistoryAdapter<TMessage>\n{\n  constructor(\n    private parent: AssistantCloudThreadHistoryAdapter,\n    private formatAdapter: MessageFormatAdapter<TMessage, TStorageFormat>,\n  ) {}\n\n  async append(item: MessageFormatItem<TMessage>) {\n    // Encode the message using the format adapter\n    const encoded = this.formatAdapter.encode(item);\n    const messageId = this.formatAdapter.getId(item.message);\n\n    // Delegate to parent's internal append method with the encoded format\n    return this.parent._appendWithFormat(\n      item.parentId,\n      messageId,\n      this.formatAdapter.format,\n      encoded,\n    );\n  }\n\n  async load(): Promise<MessageFormatRepository<TMessage>> {\n    // Delegate to parent's internal load method with format filter\n    return this.parent._loadWithFormat(\n      this.formatAdapter.format,\n      (message: MessageStorageEntry<TStorageFormat>) =>\n        this.formatAdapter.decode(message),\n    );\n  }\n}\n\nclass AssistantCloudThreadHistoryAdapter implements ThreadHistoryAdapter {\n  constructor(\n    private cloudRef: RefObject<AssistantCloud>,\n    private threadListItemRuntime: ThreadListItemRuntime,\n  ) {}\n\n  private _getIdForLocalId: Record<string, string | Promise<string>> = {};\n\n  withFormat<TMessage, TStorageFormat>(\n    formatAdapter: MessageFormatAdapter<TMessage, TStorageFormat>,\n  ): GenericThreadHistoryAdapter<TMessage> {\n    return new FormattedThreadHistoryAdapter(this, formatAdapter);\n  }\n\n  async append({ parentId, message }: ExportedMessageRepositoryItem) {\n    const { remoteId } = await this.threadListItemRuntime.initialize();\n    const task = this.cloudRef.current.threads.messages\n      .create(remoteId, {\n        parent_id: parentId\n          ? ((await this._getIdForLocalId[parentId]) ?? parentId)\n          : null,\n        format: \"aui/v0\",\n        content: auiV0Encode(message),\n      })\n      .then(({ message_id }) => {\n        this._getIdForLocalId[message.id] = message_id;\n        return message_id;\n      });\n\n    this._getIdForLocalId[message.id] = task;\n\n    return task.then(() => {});\n  }\n\n  async load() {\n    const remoteId = this.threadListItemRuntime.getState().remoteId;\n    if (!remoteId) return { messages: [] };\n    const { messages } = await this.cloudRef.current.threads.messages.list(\n      remoteId,\n      {\n        format: \"aui/v0\",\n      },\n    );\n    const payload = {\n      messages: messages\n        .filter(\n          (m): m is typeof m & { format: \"aui/v0\" } => m.format === \"aui/v0\",\n        )\n        .map(auiV0Decode)\n        .reverse(),\n    };\n    return payload;\n  }\n\n  // Internal methods for FormattedThreadHistoryAdapter\n  async _appendWithFormat<T>(\n    parentId: string | null,\n    messageId: string,\n    format: string,\n    content: T,\n  ) {\n    const { remoteId } = await this.threadListItemRuntime.initialize();\n\n    const task = this.cloudRef.current.threads.messages\n      .create(remoteId, {\n        parent_id: parentId\n          ? ((await this._getIdForLocalId[parentId]) ?? parentId)\n          : null,\n        format,\n        content: content as ReadonlyJSONObject,\n      })\n      .then(({ message_id }) => {\n        this._getIdForLocalId[messageId] = message_id;\n        return message_id;\n      });\n\n    this._getIdForLocalId[messageId] = task;\n\n    return task.then(() => {});\n  }\n\n  async _loadWithFormat<TMessage, TStorageFormat>(\n    format: string,\n    decoder: (\n      message: MessageStorageEntry<TStorageFormat>,\n    ) => MessageFormatItem<TMessage>,\n  ): Promise<MessageFormatRepository<TMessage>> {\n    const remoteId = this.threadListItemRuntime.getState().remoteId;\n    if (!remoteId) return { messages: [] };\n\n    const { messages } = await this.cloudRef.current.threads.messages.list(\n      remoteId,\n      {\n        format,\n      },\n    );\n\n    return {\n      messages: messages\n        .filter((m) => m.format === format)\n        .map((m) =>\n          decoder({\n            id: m.id,\n            parent_id: m.parent_id,\n            format: m.format,\n            content: m.content as TStorageFormat,\n          }),\n        )\n        .reverse(),\n    };\n  }\n}\n\nexport const useAssistantCloudThreadHistoryAdapter = (\n  cloudRef: RefObject<AssistantCloud>,\n): ThreadHistoryAdapter => {\n  const threadListItemRuntime = useThreadListItemRuntime();\n  const [adapter] = useState(\n    () =>\n      new AssistantCloudThreadHistoryAdapter(cloudRef, threadListItemRuntime),\n  );\n\n  return adapter;\n};\n"],"mappings":"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","names":[]}