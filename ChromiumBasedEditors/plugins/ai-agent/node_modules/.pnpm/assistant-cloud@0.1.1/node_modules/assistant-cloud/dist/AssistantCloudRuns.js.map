{"version":3,"sources":["../src/AssistantCloudRuns.tsx"],"sourcesContent":["import { AssistantCloudAPI } from \"./AssistantCloudAPI\";\nimport { AssistantStream, PlainTextDecoder } from \"assistant-stream\";\n\ntype AssistantCloudRunsStreamBody = {\n  thread_id: string;\n  assistant_id: \"system/thread_title\";\n  messages: readonly unknown[]; // TODO type\n};\n\nexport class AssistantCloudRuns {\n  constructor(private cloud: AssistantCloudAPI) {}\n\n  public __internal_getAssistantOptions(assistantId: string) {\n    return {\n      api: this.cloud._baseUrl + \"/v1/runs/stream\",\n      headers: async () => {\n        const headers = await this.cloud._auth.getAuthHeaders();\n        if (!headers) throw new Error(\"Authorization failed\");\n        return {\n          ...headers,\n          Accept: \"text/plain\",\n        };\n      },\n      body: {\n        assistant_id: assistantId,\n        response_format: \"vercel-ai-data-stream/v1\",\n        thread_id: \"unstable_todo\",\n      },\n    };\n  }\n\n  public async stream(\n    body: AssistantCloudRunsStreamBody,\n  ): Promise<AssistantStream> {\n    const response = await this.cloud.makeRawRequest(\"/runs/stream\", {\n      method: \"POST\",\n      headers: {\n        Accept: \"text/plain\",\n      },\n      body,\n    });\n    return AssistantStream.fromResponse(response, new PlainTextDecoder());\n  }\n}\n"],"mappings":";AACA,SAAS,iBAAiB,wBAAwB;AAQ3C,IAAM,qBAAN,MAAyB;AAAA,EAC9B,YAAoB,OAA0B;AAA1B;AAAA,EAA2B;AAAA,EAExC,+BAA+B,aAAqB;AACzD,WAAO;AAAA,MACL,KAAK,KAAK,MAAM,WAAW;AAAA,MAC3B,SAAS,YAAY;AACnB,cAAM,UAAU,MAAM,KAAK,MAAM,MAAM,eAAe;AACtD,YAAI,CAAC,QAAS,OAAM,IAAI,MAAM,sBAAsB;AACpD,eAAO;AAAA,UACL,GAAG;AAAA,UACH,QAAQ;AAAA,QACV;AAAA,MACF;AAAA,MACA,MAAM;AAAA,QACJ,cAAc;AAAA,QACd,iBAAiB;AAAA,QACjB,WAAW;AAAA,MACb;AAAA,IACF;AAAA,EACF;AAAA,EAEA,MAAa,OACX,MAC0B;AAC1B,UAAM,WAAW,MAAM,KAAK,MAAM,eAAe,gBAAgB;AAAA,MAC/D,QAAQ;AAAA,MACR,SAAS;AAAA,QACP,QAAQ;AAAA,MACV;AAAA,MACA;AAAA,IACF,CAAC;AACD,WAAO,gBAAgB,aAAa,UAAU,IAAI,iBAAiB,CAAC;AAAA,EACtE;AACF;","names":[]}